<!-- navbar -->
<%- include('navbar') %>

<!-- alert -->
<%- include('alert') %>

<!-- -------------------Breadcrumbs----------------------- -->
<nav class="breadcrumbs text-sm text-gray-600 py-4 bg-gray-50 border-b">
  <ul class="flex items-center space-x-2 container mx-auto px-6">
      <li>
          <a
              href="/home"
              class="text-blue-500 hover:text-blue-700 font-medium transition"
              >Home</a
          >
      </li>
      <span class="text-gray-400">/</span>
      <li>
          <a
              href="/allproduct"
              class="text-blue-500 hover:text-blue-700 font-medium transition"
              >All Products</a
          >
      </li>
      <span class="text-gray-400">/</span>
      <li>
          <a
              href="/productDetail/:id"
              class="text-blue-500 hover:text-blue-700 font-medium transition"
              ><%= product.productName %></a
          >
      </li>
  </ul>
</nav>


<div class="product-view grid grid-cols-1 md:grid-cols-2 gap-8 p-6">
  <!-- Left Section: Image Gallery -->
  <div class="product-image-container flex gap-4">
    <!-- Thumbnails (Left Side) -->
    <div class="flex flex-col gap-4 mt-8">
      <% product.productImage.forEach((img, index) => { %>
      <div
        class="product-image-min cursor-pointer border rounded-lg p-1 hover:shadow-lg hover:scale-105 transform transition duration-300"
        onclick="changeImage('<%= img %>')"
      >
        <img
          src="<%= img %>"
          alt="Thumbnail <%= index + 1 %>"
          class="w-20 h-20 object-cover rounded-md"
        />
      </div>
      <% }) %>
    </div>
    <!-- Main Image (Right Side) -->
    <div
      class="main-image border rounded-lg overflow-hidden flex-grow w-3/4 max-w-md mx-auto"
    >
      <img
        id="image-view"
        src="<%= product.productImage[0] %>"
        alt="Main Product Image"
        class="w-full h-auto object-cover transition duration-300"
      />
    </div>
  </div>

  <!-- Right Section: Product Details -->
  <div class="product-details flex flex-col gap-6">
    <!-- Product Title -->
    <h1 class="text-3xl font-semibold text-gray-800 kurale-regular">
      <%= product.productName %>
    </h1>
    <!-- Product Description -->
    <div class="product-description text-gray-600">
      <p><%= product.productDescription %></p>
    </div>
    <!-- Price Section -->
    <div class="detail-price-section">
      <div class="flex items-center gap-4 mb-4">
        <!-- Original Price -->
        <p class="text-sm text-gray-500 line-through">
          Rs. <% product.productVariants.forEach(variant => { %>
          <span><%= (variant.price * 1.20).toFixed(2) %></span>
          <% }) %>
        </p>
        <!-- Discount Label -->
        <h4 class="text-lg text-red-500 font-semibold">20% Off</h4>
      </div>

      <!-- New Price -->
      <div class="flex items-center gap-2">
        <h3 class="text-2xl font-bold text-gray-800">
          Rs. <% product.productVariants.forEach(variant => { %>
          <span><%= variant.price %></span>
          <!-- Display the original price -->
          <% }) %>
        </h3>
      </div>
    </div>

    <!-- Rating Section -->
    <div class="flex items-center gap-2 text-yellow-500">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="yellow"
        class="w-6 h-6"
      >
        <path
          d="M12 2l3.09 6.26L22 9.27l-5 4.91 1.18 6.91L12 17.77l-6.18 3.32L7 14.18 2 9.27l6.91-1.01L12 2z"
        />
      </svg>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="yellow"
        class="w-6 h-6"
      >
        <path
          d="M12 2l3.09 6.26L22 9.27l-5 4.91 1.18 6.91L12 17.77l-6.18 3.32L7 14.18 2 9.27l6.91-1.01L12 2z"
        />
      </svg>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="yellow"
        class="w-6 h-6"
      >
        <path
          d="M12 2l3.09 6.26L22 9.27l-5 4.91 1.18 6.91L12 17.77l-6.18 3.32L7 14.18 2 9.27l6.91-1.01L12 2z"
        />
      </svg>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="yellow"
        class="w-6 h-6"
      >
        <path
          d="M12 2l3.09 6.26L22 9.27l-5 4.91 1.18 6.91L12 17.77l-6.18 3.32L7 14.18 2 9.27l6.91-1.01L12 2z"
        />
      </svg>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="yellow"
        class="w-6 h-6"
      >
        <path
          fill-rule="evenodd"
          d="M11.998 2.25a.75.75 0 01.671.418l2.504 5.075 5.601.814a.75.75 0 01.416 1.279l-4.053 3.95.957 5.579a.75.75 0 01-1.088.791L12 17.963l-5.016 2.635a.75.75 0 01-1.088-.79l.957-5.58-4.053-3.95a.75.75 0 01.416-1.279l5.601-.814 2.504-5.075a.75.75 0 01.671-.418zm0 3.019L10.114 9.37a.75.75 0 01-.564.41l-4.573.665 3.31 3.228a.75.75 0 01.216.664l-.781 4.556 4.1-2.156a.75.75 0 01.698 0l4.1 2.156-.781-4.556a.75.75 0 01.216-.664l3.31-3.228-4.573-.665a.75.75 0 01-.564-.41L12 5.27z"
          clip-rule="evenodd"
        />
      </svg>
      <!-- Repeat for other stars -->
      <p class="text-blue-600">| 122 reviews</p>
    </div>

    <!-- Quantity Selector -->
    <div class="flex items-center mb-4">
      <span class="text-gray-600 mr-4">Quantity</span>
      <div class="flex items-center space-x-2">
        <button
          id="decrease"
          class="bg-gray-200 text-gray-800 px-2 py-1 rounded-md transition duration-300 hover:bg-gray-300"
        >
          -
        </button>
        <span id="quantity" class="text-gray-800">1</span>
        <button
          id="increase"
          class="bg-gray-200 text-gray-800 px-2 py-1 rounded-md transition duration-300 hover:bg-gray-300"
        >
          +
        </button>
      </div>
    </div>

    <!-- Hidden Limit Exceeded Message -->
    <div id="limit-exceeded" class="hidden text-red-600 mt-2 font-semibold">
      Quantity limit exceeded. Maximum quantity is 4.
    </div>

    <!-- Stock Information -->
    <div class="product-description">
      <P class="text-2xl font-bold text-gray-800">
        Weight. <% product.productVariants.forEach(variant => { %>
        <span><%= variant.weight %></span>
        <!-- Display the original price -->
        <% }) %>
      </P>

      <!-- Stock Status Indicator -->
<div class="mt-4">
  <% if (product.productVariants[0].stock <= 0) { %>
      <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800">
          Out of Stock
      </span>
  <% } else if (product.productVariants[0].stock <= 10) { %>
      <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-100 text-yellow-800">
          Low Stock: Only <%= product.productVariants[0].stock %> left
      </span>
  <% } else { %>
      <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
          In Stock
      </span>
  <% } %>
</div>
    </div>

    <!-- Add to Cart and Buy Now Buttons -->
    <div class="flex gap-4">
      <button 
    onclick="addToCart('<%= product._id %>', '<%= product.productVariants[0].stock %>')"
    class="<%= product.productVariants[0].stock <= 0 ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700' %> text-white px-4 py-2 rounded"
    <%= product.productVariants[0].stock <= 0 ? 'disabled' : '' %>
>
    <%= product.productVariants[0].stock <= 0 ? 'Out of Stock' : 'Add to Cart' %>
</button>

      <a
        href="#"
        class="px-6 py-2 bg-yellow-500 text-gray-800 rounded-md hover:bg-yellow-600 flex items-center transition duration-300"
      >
        <span>Buy Now</span>
        <i class="ml-2 bi bi-bag-fill"></i>
      </a>
    </div>

    <!-- Delivery Information -->
    <div class="product-delivery flex flex-col gap-6 border-t pt-6"></div>
  </div>
</div>

<%- include('similarProducts') %>

<script>
  const imageContainer = document.getElementsByClassName("main-image")[0];
  const productImg = document.getElementById("image-view");

  imageContainer.addEventListener("mousemove", (e) => {
    const rect = e.target.getBoundingClientRect();
    const x = (e.clientX - rect.left) / rect.width;
    const y = (e.clientY - rect.top) / rect.height;
    productImg.style.transformOrigin = `${x * 100}% ${y * 100}%`;
    productImg.style.transform = "scale(1.5)";
  });

  imageContainer.addEventListener("mouseleave", () => {
    productImg.style.transformOrigin = "center";
    productImg.style.transform = "scale(1)";
  });

  async function changeImage(src) {
    productImg.src = `${src}`;
  }

  // Quantity Controls
  document.getElementById("increase").addEventListener("click", function () {
    const quantityElement = document.getElementById("quantity");
    let quantity = parseInt(quantityElement.textContent);
    const limitExceededMessage = document.getElementById("limit-exceeded");

    // Limit quantity to 4
    if (quantity < 4) {
      quantityElement.textContent = quantity + 1;
      limitExceededMessage.classList.add("hidden"); // Hide the limit message
    } else {
      // Show limit exceeded message
      limitExceededMessage.classList.remove("hidden");
    }
  });

  document.getElementById("decrease").addEventListener("click", function () {
    const quantityElement = document.getElementById("quantity");
    let quantity = parseInt(quantityElement.textContent);
    const limitExceededMessage = document.getElementById("limit-exceeded");

    // Decrease quantity only if it's greater than 1
    if (quantity > 1) {
      quantityElement.textContent = quantity - 1;
      limitExceededMessage.classList.add("hidden"); // Hide the limit message when decreasing
    }
  });


// product add to cart alerts

  async function addToCart(productId) {
    const quantity = parseInt(document.getElementById("quantity").textContent);
    console.log("Adding to cart:", { productId, quantity });

    try {
        const response = await fetch("/addToCart", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                productId: productId,
                quantity: quantity,
            }),
        });
        
        const data = await response.json();

        if (response.ok && data.status) { // Changed 'data.success' to 'data.status'
            // Success message
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: data.message || 'Product added to cart successfully',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 1500,
                timerProgressBar: true
            });

            // Update cart count
            if (document.getElementById('cart-count')) {
                const cartCount = document.getElementById('cart-count');
                cartCount.textContent = parseInt(cartCount.textContent || 0) + 1;
            }
        } else {
            // Error from server
            throw new Error(data.message || 'Failed to add to cart');
        }

    } catch (error) {
        console.error('Error adding to cart:', error);
        // Show error message from server
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Something went wrong!',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true
        });
    }
}

  </script>