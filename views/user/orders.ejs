<!-- navbar -->
<%- include('navbar') %>

<!-- alert -->
<%- include('alert') %>

<!-- Breadcrumb Navigation -->
<nav class="breadcrumbs text-sm text-gray-600 py-4 bg-gray-50 border-b">
  <ul class="flex items-center space-x-2 container mx-auto px-6">
      <li>
          <a
              href="/home"
              class="text-blue-500 hover:text-blue-700 font-medium transition"
              >Home</a
          >
      </li>
      <span class="text-gray-400">/</span>
      <li>
          <a
              href="/profile"
              class="text-blue-500 hover:text-blue-700 font-medium transition"
              >Profile</a
          >
      </li>
      <span class="text-gray-400">/</span>
      <li>
        <a
            href="/orders"
            class="text-blue-500 hover:text-blue-700 font-medium transition"
            >Orders</a
        >
      </li>
      
  </ul>
</nav>

<div class="container mx-auto px-4 md:px-8 mt-10">
  <h1 class="text-3xl font-bold text-center mb-8 text-gray-800">My Orders</h1>
  <% if(orderDetails.length != 0) { %>
  <div class="flex flex-col lg:flex-row lg:items-start lg:space-x-8">
    <!-- Left Sidebar: Order Tabs -->
    <aside
      class="lg:w-1/4 w-full mb-8 lg:mb-0 bg-white shadow-md rounded-lg p-6"
    >
      <h2 class="text-lg font-semibold text-gray-700 mb-6">Filter Orders</h2>
      <ul class="flex flex-col space-y-4">
        <li>
          <button
            class="w-full px-4 py-2 bg-blue-500 text-white rounded-lg focus:outline-none hover:bg-blue-600 transition border-2 border-blue-500"
            onclick="filterOrders('All')"
          >
            All Orders
          </button>
        </li>
        <li>
          <button
            class="w-full px-4 py-2 bg-blue-500 text-white rounded-lg focus:outline-none hover:bg-blue-600 transition border-2 border-blue-500"
            onclick="filterOrders('Returned')"
          >
            Returned Orders
          </button>
        </li>
        <li>
          <button
            class="w-full px-4 py-2 bg-blue-500 text-white rounded-lg focus:outline-none hover:bg-blue-600 transition border-2 border-blue-500"
            onclick="filterOrders('Cancelled')"
          >
            Canceled Orders
          </button>
        </li>
        <li>
          <button
            class="w-full px-4 py-2 bg-blue-500 text-white rounded-lg focus:outline-none hover:bg-blue-600 transition border-2 border-blue-500"
            onclick="filterOrders('Delivered')"
          >
            Delivered Orders
          </button>
        </li>
      </ul>
    </aside>

    <!-- Right Content: Orders Grid -->
    <div class="flex-1 flex flex-col space-y-6 mb-8">
      
      <% orderDetails.forEach(item => { %>
      <div
        class="bg-white shadow-md rounded-lg p-6 border border-gray-200 order-container"
        data-status="<%= item.orderStatus %>"
      >
        <% item.products.forEach(product => { %>
        <div class="flex items-center space-x-4 mb-4">
          <img
            src="<%= product.product_image %>"
            class="w-20 h-20 rounded-lg object-cover"
            alt="<%= product.product_name %>"
          />
          <div>
            <h5 class="text-lg font-semibold text-gray-800">
              <%= product.product_name %>
            </h5>
            <p class="text-sm text-gray-600">
              Quantity: <b><%= product.product_quantity %></b>
            </p>
            <p class="text-sm text-gray-600">
              Price: <b>‚Çπ<%= product.product_price.toLocaleString() %></b>
            </p>
          </div>
        </div>
        <% }) %>

        <hr class="my-4" />

        <div class="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p class="text-gray-600">Order Placed:</p>
            <p class="font-medium text-gray-800">
              <%= item.createdAt.toDateString() %>
            </p>
          </div>
          <div>
            <p class="text-gray-600">Order ID:</p>
            <p class="font-medium text-gray-800">#<%= item.order_id %></p>
          </div>
          <div>
            <p class="text-gray-600">Order Status:</p>
            <p
              class="font-medium <%= item.orderStatus === 'Cancelled' ? 'text-red-500' : item.orderStatus === 'Delivered' ? 'text-green-500' : 'text-blue-500' %>"
            >
              <%= item.orderStatus %>
            </p>
          </div>
          <div>
            <p class="text-gray-600">Total Price:</p>
            <p class="font-medium text-gray-800">
              ‚Çπ<%= item.finalAmount %>
            </p>
          </div>
        </div>

        <div class="flex justify-between items-center mt-4">
          <a
            href="/orderDetail/<%= item._id %>"
            class="text-red-500 hover:text-red-600 transition text-sm"
          >
            üìù View Details
          </a>

          <!-- Action Buttons -->
          <% if(item.paymentStatus === "Pending") { %>
          <button
            onclick="retryPayment('<%= item._id %>')"
            class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
          >
            Retry Payment
          </button>
          <% } else if(item.orderStatus === 'Delivered') { %>
          <button
            class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
            data-id="<%= item._id %>"
            onclick="returnOrder(this)"
          >
            Return Order
          </button>
          <% } else if(item.orderStatus === 'Confirmed' || item.orderStatus ===
          'Shipped') { %>
          <button
            class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
            data-id="<%= item._id %>"
            onclick="cancelOrder(this)"
          >
            Cancel Order
          </button>
          <% } %>
        </div>
      </div>
      <% }) %>
    </div>
  </div>
  <% } else { %>
  <!-- No Orders -->
  <div class="flex flex-col items-center justify-center space-y-4 mt-10">
    <h2 class="text-xl text-gray-700">You have no orders</h2>
    <a
      href="/home"
      class="px-6 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition"
    >
      Shop Now
    </a>
  </div>
  <% } %>
</div>

<!-- pagination -->
<div class="mt-6 flex justify-center items-center mb-8">
  <nav class="inline-flex">
    <% if (currentPage > 1) { %>
    <a
      href="?page=<%= currentPage - 1 %>"
      class="px-4 py-2 bg-blue-500 text-white rounded-l-lg hover:bg-blue-600 transition"
    >
      Previous
    </a>
    <% } %>

    <% for (let i = 1; i <= totalPages; i++) { %>
    <a
      href="?page=<%= i %>"
      class="px-4 py-2 <%= i === currentPage ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-blue-500 hover:text-white transition' %>"
    >
      <%= i %>
    </a>
    <% } %>

    <% if (currentPage < totalPages) { %>
    <a
      href="?page=<%= currentPage + 1 %>"
      class="px-4 py-2 bg-blue-500 text-white rounded-r-lg hover:bg-blue-600 transition"
    >
      Next
    </a>
    <% } %>
  </nav>
</div>


<%- include('footer') %>

<script>
  //----------------------- filter order ------------------------------
  function filterOrders(status) {
    const orders = document.querySelectorAll(".order-container");
    orders.forEach((order) => {
      if (status === "All" || order.getAttribute("data-status") === status) {
        order.style.display = "block";
      } else {
        order.style.display = "none";
      }
    });
  }

  //----------------------- cancel order ------------------------------
  async function cancelOrder(button) {
    const orderId = button.getAttribute("data-id");

    Swal.fire({
      title: "Are you sure?",
      text: "You want to cancel this order?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "Yes, cancel it!",
      cancelButtonText: "No, keep it",
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await fetch(`/cancelOrder/${orderId}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (!response.ok) throw new Error("Network response was not ok");

          const data = await response.json();
          if (data.success) {
            Swal.fire(
              "Order Cancelled!",
              "Your order has been cancelled successfully.",
              "success"
            ).then(() => {
              window.location.reload();
            });
          } else {
            throw new Error(data.message || "Failed to cancel order");
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire("Error", error.message || "Something went wrong!", "error");
        }
      }
    });
  }

  // return order
  function returnOrder(button) {
    const orderId = button.getAttribute('data-id');
    
    Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to return this order?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, return it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/return-order/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire(
                        'Returned!',
                        'Your order has been returned successfully.',
                        'success'
                    ).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire(
                        'Error!',
                        data.message,
                        'error'
                    );
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire(
                    'Error!',
                    'Something went wrong while processing your return.',
                    'error'
                );
            });
        }
    });
}
</script>
