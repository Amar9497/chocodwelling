<!-- navbar -->
<%- include('navbar') %>

<!-- alert -->
<%- include('alert') %>

<!-- Breadcrumb Navigation -->
<nav class="breadcrumbs text-sm text-gray-600 py-4 bg-gray-50 border-b">
  <ul class="flex items-center space-x-2 container mx-auto px-6">
      <li>
          <a
              href="/home"
              class="text-blue-500 hover:text-blue-700 font-medium transition"
              >Home</a
          >
      </li>
      <span class="text-gray-400">/</span>
      <li>
          <a
              href="/profile"
              class="text-blue-500 hover:text-blue-700 font-medium transition"
              >Profile</a
          >
      </li>
      <span class="text-gray-400">/</span>
      <li>
        <a
            href="/orders"
            class="text-blue-500 hover:text-blue-700 font-medium transition"
            >Orders</a
        >
      </li>
      
  </ul>
</nav>

<div class="container mx-auto px-4 md:px-8 mt-10">
  <h1 class="text-3xl font-bold text-center mb-8 text-gray-800">My Orders</h1>
  <% if(orderDetails.length != 0) { %>
  <div class="flex flex-col lg:flex-row lg:items-start lg:space-x-8">
    <!-- Left Sidebar: Order Tabs -->
    <aside
      class="lg:w-1/4 w-full mb-8 lg:mb-0 bg-white shadow-md rounded-lg p-6"
    >
      <h2 class="text-lg font-semibold text-gray-700 mb-6">Filter Orders</h2>
      <ul class="flex flex-col space-y-4">
        <li>
          <button
            class="w-full px-4 py-2 bg-blue-500 text-white rounded-lg focus:outline-none hover:bg-blue-600 transition border-2 border-blue-500"
            onclick="filterOrders('All')"
          >
            All Orders
          </button>
        </li>
        <li>
          <button
            class="w-full px-4 py-2 bg-blue-500 text-white rounded-lg focus:outline-none hover:bg-blue-600 transition border-2 border-blue-500"
            onclick="filterOrders('Returned')"
          >
            Returned Orders
          </button>
        </li>
        <li>
          <button
            class="w-full px-4 py-2 bg-blue-500 text-white rounded-lg focus:outline-none hover:bg-blue-600 transition border-2 border-blue-500"
            onclick="filterOrders('Cancelled')"
          >
            Canceled Orders
          </button>
        </li>
        <li>
          <button
            class="w-full px-4 py-2 bg-blue-500 text-white rounded-lg focus:outline-none hover:bg-blue-600 transition border-2 border-blue-500"
            onclick="filterOrders('Delivered')"
          >
            Delivered Orders
          </button>
        </li>
      </ul>
    </aside>

    <!-- Right Content: Orders Grid -->
    <div class="flex-1 flex flex-col space-y-6 mb-8">
      
      <% orderDetails.forEach(item => { %>
      <div
        class="bg-white shadow-md rounded-lg p-6 border border-gray-200 order-container"
        data-status="<%= item.orderStatus %>"
      >
        <% item.products.forEach(product => { %>
          <div class="flex flex-wrap items-center space-y-4 md:space-y-0 md:space-x-4">
            <!-- Product Info -->
            <div class="flex items-center space-x-4 mb-4 md:mb-0 flex-1">
              <img
                src="<%= product.product_image %>"
                class="w-16 h-16 md:w-20 md:h-20 rounded-lg object-cover"
                alt="<%= product.product_name %>"
              />
              <div>
                <h5 class="text-base md:text-lg font-semibold text-gray-800">
                  <%= product.product_name %>
                </h5>
                <p class="text-sm text-gray-600">
                  Quantity: <b><%= product.product_quantity %></b>
                </p>
                <p class="text-sm text-gray-600">
                  Price: <b>‚Çπ<%= product.product_price.toLocaleString() %></b>
                </p>
              </div>
            </div>
          
            <!-- Review Button -->
            <div class="flex justify-end w-full md:w-auto">
              <% if (item.orderStatus === 'Delivered') { %>
                <button
                  onclick="openReviewModal('<%= product.product_id._id %>', '<%= product.product_name %>')"
                  class="px-4 py-2 w-full md:w-auto bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
                >
                  Write Review
                </button>
              <% } %>
            </div>
          </div>
          
        <% }) %>


        <hr class="my-4" />

        <div class="grid grid-cols-2 gap-4 text-sm">
          <div>
            <p class="text-gray-600">Order Placed:</p>
            <p class="font-medium text-gray-800">
              <%= item.createdAt.toDateString() %>
            </p>
          </div>
          <div>
            <p class="text-gray-600">Order ID:</p>
            <p class="font-medium text-gray-800">#<%= item.order_id %></p>
          </div>
          <div>
            <p class="text-gray-600">Order Status:</p>
            <p
              class="font-medium <%= item.orderStatus === 'Cancelled' ? 'text-red-500' : item.orderStatus === 'Delivered' ? 'text-green-500' : 'text-blue-500' %>"
            >
              <%= item.orderStatus %>
            </p>
          </div>
          <div>
            <p class="text-gray-600">Total Price:</p>
            <p class="font-medium text-gray-800">
              ‚Çπ<%= item.finalAmount %>
            </p>
          </div>
        </div>


        <div class="flex justify-between items-center mt-4">
          <a
            href="/orderDetail/<%= item._id %>"
            class="text-red-500 hover:text-red-600 transition text-sm"
          >
            üìù View Details
          </a>
          
          <!-- Action Buttons -->
          <div class="flex gap-2">
            <button
                class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition"
                data-id="<%= item._id %>"
              >
                Invoice
              </button>
            <% if(item.paymentStatus === "Pending" || item.paymentStatus === "Failed") { %>
              
              <button 
                onclick="retryPayment('<%= item._id %>', '<%= item.finalAmount %>')"
                class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
            >
                Retry Payment
            </button>
              
            <% } else if(item.orderStatus === 'Delivered') { %>
              <!-- Add Review Button for each product -->
              <% item.products.forEach(product => { %>
                
              <% }) %>
              
            <% } else if(item.orderStatus === 'Confirmed' || item.orderStatus === 'Shipped') { %>
              <button
                class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
                data-id="<%= item._id %>"
                onclick="cancelOrder(this)"
              >
                Cancel Order
              </button>
            <% } %>
            <% if (item.orderStatus === 'Delivered') { %>
              <button
                class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
                data-id="<%= item._id %>"
                onclick="returnOrder(this)"
              >
                Return Order
              </button>
            <% } %>
          </div>
        </div>

      </div>
      <% }) %>
    </div>
  </div>
  <% } else { %>
  <!-- No Orders -->
  <div class="flex flex-col items-center justify-center space-y-4 mt-10">
    <h2 class="text-xl text-gray-700">You have no orders</h2>
    <a
      href="/home"
      class="px-6 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition"
    >
      Shop Now
    </a>
  </div>
  <% } %>
</div>

<!-- pagination -->
<div class="mt-6 flex justify-center items-center mb-8">
  <nav class="inline-flex">
    <% if (currentPage > 1) { %>
    <a
      href="?page=<%= currentPage - 1 %>"
      class="px-4 py-2 bg-blue-500 text-white rounded-l-lg hover:bg-blue-600 transition"
    >
      Previous
    </a>
    <% } %>

    <% for (let i = 1; i <= totalPages; i++) { %>
    <a
      href="?page=<%= i %>"
      class="px-4 py-2 <%= i === currentPage ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-blue-500 hover:text-white transition' %>"
    >
      <%= i %>
    </a>
    <% } %>

    <% if (currentPage < totalPages) { %>
    <a
      href="?page=<%= currentPage + 1 %>"
      class="px-4 py-2 bg-blue-500 text-white rounded-r-lg hover:bg-blue-600 transition"
    >
      Next
    </a>
    <% } %>
  </nav>
</div>

<%- include('footer') %>

<!-- Review Modal -->
<div id="reviewModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
  <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
      <div class="flex justify-between items-center mb-4">
          <h2 class="text-2xl font-bold">Write a Review</h2>
      </div>
      
      <p id="reviewProductName" class="text-gray-600 mb-4"></p>
      
      <form id="reviewForm" class="space-y-4">
          <input type="hidden" id="productId" name="productId">
          
          <!-- Rating Stars -->
          <div>
              <label class="block text-gray-700 mb-2">Rating *</label>
              <div class="flex gap-2">
                  <% for(let i = 1; i <= 5; i++) { %>
                      <div class="flex items-center">
                          <input 
                              type="radio" 
                              name="rating" 
                              value="<%= i %>" 
                              id="star<%= i %>" 
                              required 
                              class="hidden"
                          >
                          <label 
                              for="star<%= i %>" 
                              class="star-label text-3xl cursor-pointer text-gray-300 hover:text-yellow-400"
                              data-rating="<%= i %>"
                          >‚òÖ</label>
                      </div>
                  <% } %>
              </div>
          </div>

          <!-- Review Text -->
          <div>
              <label class="block text-gray-700 mb-2">Your Review *</label>
              <textarea 
                  name="review"
                  required
                  class="w-full p-3 border rounded-lg"
                  rows="4"
                  minlength="10"
                  placeholder="Share your experience..."
              ></textarea>
          </div>

          <!-- Submit Button -->
          <div class="flex justify-end gap-2">
              <button type="button" onclick="closeReviewModal()" 
                  class="px-4 py-2 bg-gray-500 text-white rounded">
                  Cancel
              </button>
              <button type="submit" 
                  class="px-4 py-2 bg-blue-500 text-white rounded">
                  Submit Review
              </button>
          </div>
      </form>
  </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
function openReviewModal(productId, productName) {
  document.getElementById('reviewModal').classList.remove('hidden');
  document.getElementById('reviewModal').classList.add('flex');
  document.getElementById('productId').value = productId;
  document.getElementById('reviewProductName').textContent = `Product: ${productName}`;
}

function closeReviewModal() {
  document.getElementById('reviewModal').classList.add('hidden');
  document.getElementById('reviewModal').classList.remove('flex');
  document.getElementById('reviewForm').reset();
}

// Handle form submission
document.getElementById('reviewForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  try {
      const form = e.target;
      const productId = document.getElementById('productId').value;
      const rating = form.querySelector('input[name="rating"]:checked')?.value;
      const review = form.querySelector('textarea[name="review"]').value;

      // Debug log
      console.log('Submitting review:', { productId, rating, review });

      if (!rating || !review) {
          throw new Error('Please provide both rating and review');
      }

      const response = await fetch(`/product/${productId}/review`, {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
          },
          body: JSON.stringify({
              rating: parseInt(rating),
              review: review.trim()
          }),
          credentials: 'include'
      });

      const data = await response.json();
      console.log('Response:', data);

      if (data.success) {
          Swal.fire({
              title: 'Success!',
              text: 'Your review has been submitted successfully',
              icon: 'success'
          }).then(() => {
              closeReviewModal();
              window.location.reload();
          });
      } else {
          throw new Error(data.message || 'Failed to submit review');
      }
  } catch (error) {
      console.error('Error:', error);
      Swal.fire({
          title: 'Error!',
          text: error.message || 'Something went wrong',
          icon: 'error'
      });
  }
});

// Close modal when clicking outside
document.getElementById('reviewModal').addEventListener('click', (e) => {
  if (e.target === e.currentTarget) {
      closeReviewModal();
  }
});
</script>



<script>
  // Invoice button functionality
  document.addEventListener('DOMContentLoaded', function() {
    const invoiceButtons = document.querySelectorAll('button:not([onclick])');
    
    invoiceButtons.forEach(button => {
        if (button.textContent.trim() === 'Invoice') {
            button.addEventListener('click', async (e) => {
                e.stopPropagation(); // Prevent event bubbling
                const orderId = e.target.dataset.id;
                try {
                    // Show loading state
                    e.target.disabled = true;
                    e.target.textContent = 'Generating...';
        
                    // Fetch invoice
                    window.location.href = `/order/${orderId}/invoice`;
        
                } catch (error) {
                    console.error('Error downloading invoice:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Failed to download invoice!'
                    });
                } finally {
                    // Reset button state
                    setTimeout(() => {
                        e.target.disabled = false;
                        e.target.textContent = 'Invoice';
                    }, 2000);
                }
            });
        }
    });
  });
</script>


<script>
 
  //----------------------- filter order ------------------------------
  function filterOrders(status) {
    const orders = document.querySelectorAll(".order-container");
    orders.forEach((order) => {
      if (status === "All" || order.getAttribute("data-status") === status) {
        order.style.display = "block";
      } else {
        order.style.display = "none";
      }
    });
  }

  //----------------------- cancel order ------------------------------
  async function cancelOrder(button) {
    const orderId = button.getAttribute("data-id");

    Swal.fire({
      title: "Are you sure?",
      text: "You want to cancel this order?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "Yes, cancel it!",
      cancelButtonText: "No, keep it",
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await fetch(`/cancelOrder/${orderId}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (!response.ok) throw new Error("Network response was not ok");

          const data = await response.json();
          if (data.success) {
            Swal.fire(
              "Order Cancelled!",
              "Your order has been cancelled successfully.",
              "success"
            ).then(() => {
              window.location.reload();
            });
          } else {
            throw new Error(data.message || "Failed to cancel order");
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire("Error", error.message || "Something went wrong!", "error");
        }
      }
    });
  }

  // return order
  function returnOrder(button) {
    const orderId = button.getAttribute('data-id');
    
    Swal.fire({
        title: 'Return Order',
        html: `
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Please select a reason for return:
                </label>
                <select id="returnReason" class="w-full p-2 border rounded-lg">
                    <option value="">Select a reason</option>
                    <option value="Damaged Product">Damaged Product</option>
                    <option value="Wrong Product">Wrong Product</option>
                    <option value="Quality Issue">Quality Issue</option>
                    <option value="Size/Fit Issue">Size/Fit Issue</option>
                    <option value="Other">Other</option>
                </select>
                <textarea 
                    id="returnDescription" 
                    class="mt-3 w-full p-2 border rounded-lg" 
                    placeholder="Please provide additional details..."
                    rows="3"
                ></textarea>
            </div>
        `,
        showCancelButton: true,
        confirmButtonText: 'Submit Return Request',
        cancelButtonText: 'Cancel',
        showLoaderOnConfirm: true,
        preConfirm: () => {
            const reason = document.getElementById('returnReason').value;
            const description = document.getElementById('returnDescription').value;
            
            if (!reason) {
                Swal.showValidationMessage('Please select a reason');
                return false;
            }
            if (!description || description.length < 10) {
                Swal.showValidationMessage('Please provide a detailed description (minimum 10 characters)');
                return false;
            }
            
            return { reason, description };
        }
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/return-order/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    reason: result.value.reason,
                    description: result.value.description
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Return Request Submitted!',
                        text: 'Your return request is pending approval',
                        icon: 'success'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    throw new Error(data.message);
                }
            })
            .catch(error => {
                Swal.fire({
                    title: 'Error!',
                    text: error.message || 'Failed to submit return request',
                    icon: 'error'
                });
            });
        }
    });
}
</script>


<script>
  async function retryPayment(orderId, amount) {
      try {
          // Show loading state
          Swal.fire({
              title: 'Processing...',
              text: 'Initializing payment',
              allowOutsideClick: false,
              showConfirmButton: false,
              didOpen: () => {
                  Swal.showLoading();
              }
          });
  
          // Create new Razorpay order
          const response = await fetch('/retry-payment', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ orderId, amount })
          });
  
          const data = await response.json();
          if (!data.success) {
              throw new Error(data.message);
          }
  
          // Initialize Razorpay
          const options = {
              key: data.key,
              amount: data.amount,
              currency: 'INR',
              name: 'Choco Dwelling',
              description: 'Order Payment',
              order_id: data.orderId,
              handler: async function(response) {
                  try {
                      const verifyResponse = await fetch('/verify-retry-payment', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({
                              orderId: orderId,
                              razorpay_order_id: response.razorpay_order_id,
                              razorpay_payment_id: response.razorpay_payment_id,
                              razorpay_signature: response.razorpay_signature
                          })
                      });
  
                      const result = await verifyResponse.json();
                      if (result.success) {
                          Swal.fire({
                              icon: 'success',
                              title: 'Payment Successful!',
                              text: 'Your payment has been completed'
                          }).then(() => {
                              window.location.reload();
                          });
                      } else {
                          throw new Error(result.message);
                      }
                  } catch (error) {
                      Swal.fire({
                          icon: 'error',
                          title: 'Payment Failed',
                          text: error.message || 'Failed to verify payment'
                      });
                  }
              }
          };
  
          const rzp = new Razorpay(options);
          rzp.open();
          Swal.close();
  
      } catch (error) {
          Swal.fire({
              icon: 'error',
              title: 'Error',
              text: error.message || 'Failed to initialize payment'
          });
      }
  }
  </script>


<script>
document.addEventListener('DOMContentLoaded', function() {
    const starLabels = document.querySelectorAll('.star-label');
    
    // Function to update stars based on selected rating
    function updateStars(selectedRating) {
        starLabels.forEach(star => {
            const rating = parseInt(star.dataset.rating);
            if (rating <= selectedRating) {
                star.classList.add('text-yellow-400');
                star.classList.remove('text-gray-300');
            } else {
                star.classList.remove('text-yellow-400');
                star.classList.add('text-gray-300');
            }
        });
    }

    // Add click event to each star
    starLabels.forEach(star => {
        star.addEventListener('click', function() {
            const rating = parseInt(this.dataset.rating);
            
            // Update the radio input
            const radioInput = document.querySelector(`input[value="${rating}"]`);
            radioInput.checked = true;
            
            // Fill all stars up to the selected one
            updateStars(rating);
        });
    });
});

// Rest of your existing modal code...
</script>

