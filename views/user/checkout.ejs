<style>
  /* Add these styles to your CSS */
  #coupon-code:disabled {
    background-color: #f3f4f6;
    cursor: not-allowed;
  }

  #remove-coupon {
    transition: all 0.3s ease;
  }

  #remove-coupon:hover {
    background-color: #dc2626;
  }
</style>
<body
  class="bg-gradient-to-br from-[#A79277] to-[#d2b69b] text-gray-800 min-h-screen"
>
  <!-- navbar -->
  <%- include('navbar') %>

  <!-- alert -->
  <%- include('alert') %>

  <div class="container mx-auto px-4 py-10">
    <div class="grid lg:grid-cols-3 gap-8">
      <!-- Left Section: Product Details & Address -->
      <div class="lg:col-span-2 space-y-6">
        <!-- Product Details -->
        <div class="bg-white p-6 rounded-lg shadow-md">
          <h2 class="text-2xl font-bold mb-4 text-gray-700">Product Details</h2>

          <% cartItems.forEach(item => { %>
          <!-- Product Item Section -->
          <div class="flex items-center space-x-4 mb-4">
            <img
              src="<%= item.product.productImage[0] %>"
              alt="Product"
              class="w-20 h-20 object-cover rounded-md shadow-sm"
            />
            <div class="flex-1">
              <h3 class="text-lg font-semibold text-gray-800">
                <%= item.product.productName %>
              </h3>
              <p class="text-sm text-gray-500">
                Quantity: <%= item.quantity %>
              </p>
              <div class="flex items-center space-x-2">
                <p class="text-lg font-bold text-[#8B7355]">
                  Rs. <%= item.subtotal.toFixed(2) %>
                </p>
                <% if (item.discount > 0) { %>
                <p class="text-sm text-gray-500 line-through">
                  Rs. <%= item.originalPrice.toFixed(2) %>
                </p>
                <span class="text-sm text-green-600">
                  (<%= item.discount %>% off)
                </span>
                <% } %>
              </div>
            </div>
          </div>
          <% }); %>

          <!-- Order Summary Section -->
          <div class="space-y-3 mb-4">
            <div class="flex justify-between">
              <span>Original Total:</span>
              <span class="text-gray-500 line-through"
                >Rs. <%= originalTotal.toFixed(2) %></span
              >
            </div>
            <% if (totalSavings > 0) { %>
            <div class="flex justify-between text-green-600">
              <span>Total Savings:</span>
              <span>Rs. <%= totalSavings.toFixed(2) %></span>
            </div>
            <% } %>
          </div>

          <!-- Final Total Section -->
          <div class="flex justify-between font-bold">
            <span>Final Total:</span>
            <span>Rs. <%= total.toFixed(2) %></span>
          </div>
        </div>

        <!-- Billing Info -->
        <div class="bg-white p-6 rounded-lg shadow-md">
          <h2 class="text-2xl font-bold mb-4 text-gray-700">Billing Info</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label
                for="billing-name"
                class="block text-sm font-medium text-gray-700"
                >Name</label
              >
              <input
                type="text"
                name="customer_name"
                value="<%= user.name %>"
                placeholder="Enter name"
                class="w-full mt-1 p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            <div>
              <label
                for="billing-email-address"
                class="block text-sm font-medium text-gray-700"
                >Email Address</label
              >
              <input
                type="email"
                name="customer_email"
                value="<%= user.email %>"
                readonly
                class="w-full mt-1 p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            <div>
              <label
                for="billing-phone"
                class="block text-sm font-medium text-gray-700"
                >Phone</label
              >
              <input
                type="text"
                name="phonenumber"
                value="<%= user.phone %>"
                placeholder="Enter phone number"
                class="w-full mt-1 p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
        </div>

        <!-- Address Selection -->
        <div class="bg-white p-6 rounded-lg shadow-md">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-2xl font-bold text-gray-700">Select Address</h2>
            <% if (userDetails.address.length < 4) { %>
            <a
              href="#"
              id="add-address-btn"
              onclick="openAddresModal()"
              title="Add New Address"
              class="btn bg-[#8B7355] text-white px-4 py-2 rounded hover:bg-[#A79277]"
            >
              Add Address
            </a>
            <% } else { %>
            <span class="text-sm text-gray-500"
              >Maximum 4 addresses allowed</span
            >
            <% } %>
          </div>
          <form id="checkoutForm">
            <div class="grid grid-cols-1 gap-4">
              <% userDetails.address.forEach((addr,index) => { %>
              <label
                class="block border border-gray-300 p-4 rounded-lg hover:shadow-lg transition-all cursor-pointer"
              >
                <div class="flex items-start gap-4">
                  <input
                    type="radio"
                    name="addressId"
                    value="<%= index.toString() %>"
                    class="mt-1 mr-2"
                    required
                  />
                  <div>
                    <p class="text-sm font-bold"><%= addr.building %></p>
                    <p class="text-sm text-gray-600">
                      <%= addr.street %>, <%= addr.landmark %><br />
                      <%= addr.city %>, <%= addr.state %>, <%= addr.country
                      %><br />
                      <%= addr.pincode %><br />
                      <strong>Phone:</strong> <%= addr.phoneNumber %>
                    </p>
                  </div>
                </div>
              </label>
              <% }); %>
            </div>
          </form>
        </div>
      </div>

      <!-- Right Section: Order Summary -->

      <!-- In the Order Summary section -->
      <div class="bg-white p-6 rounded-lg shadow-md flex-shrink-0">
        <h2 class="text-2xl font-bold mb-4 text-gray-700">Order Summary</h2>

        <!-- Coupon Code Section -->

        <div class="mb-6">
          <label
            for="coupon-code"
            class="block text-sm font-medium text-gray-700"
            >Discount Code</label
          >
          <div class="flex mt-2">
            <input
              type="text"
              id="coupon-code"
              name="couponCode"
              placeholder="Enter Coupon Code"
              class="w-full border border-gray-300 rounded-l-lg p-2 focus:ring-blue-500 focus:border-blue-500"
              oninput="this.value = this.value.toUpperCase()"
              style="text-transform: uppercase;"
            />
            <button
              type="button"
              id="apply-coupon"
              class="bg-[#8B7355] text-white px-4 py-2 hover:bg-[#A79277]  transition"
            >
              Apply
            </button>
            <button
              type="button"
              id="remove-coupon"
              class="bg-red-500 text-white px-4 py-2 rounded-r-lg hover:bg-red-700 transition hidden"
            >
              Remove
            </button>
          </div>
          <p id="coupon-message" class="mt-2 text-sm"></p>
        </div>

        <div class="space-y-3">
          <!-- Subtotal -->
          <div class="flex justify-between">
            <span>Subtotal:</span>
            <span id="subtotal">Rs. <%= total.toFixed(2) %></span>
          </div>

          <!-- Coupon Discount -->
          <div
            id="coupon-discount"
            class="flex justify-between text-green-600 hidden"
          >
            <span>Coupon Discount:</span>
            <span>- Rs. <span id="discount-amount">0.00</span></span>
          </div>

          <!-- Delivery Charge -->
          <div class="flex justify-between">
            <span>Delivery Charge:</span>
            <% if (total >= 500) { %>
            <span class="text-green-600">Free Delivery</span>
            <% } else { %>
            <span>Rs. 100.00</span>
            <% } %>
          </div>

          <!-- Final Total -->
          <div class="flex justify-between font-bold">
            <span>Final Total:</span>
            <span data-price-display="final"
              >Rs.
              <span id="final-total">
                <%= (total >= 500 ? total : total + 100).toFixed(2) %>
              </span></span
            >
          </div>
        </div>

        <!-- Payment Method Selection -->
        <div class="mb-6">
          <p class="text-sm font-medium mb-2 text-gray-700">
            Select Payment Method:
          </p>
          <div class="space-y-2">
            <label class="flex items-center space-x-2">
              <input
                type="radio"
                name="paymentMethod"
                value="Wallet"
                class="mr-2"
                required
              />
              <span>Wallet</span>
            </label>
            <label class="flex items-center space-x-2">
              <input
                type="radio"
                name="paymentMethod"
                value="Razorpay"
                class="form-radio text-blue-600"
                required
              />
              <span>Razorpay</span>
            </label>
            <label class="flex items-center space-x-2">
              <input
                type="radio"
                name="paymentMethod"
                value="COD"
                class="mr-2"
                required
              />
              <span>Cash on Delivery</span>
            </label>
          </div>
        </div>

        <!-- Place Order Form -->
        <form action="" method="post" id="place-order-form">
          <button
            type="submit"
            class="bg-[#8B7355] text-white px-4 py-2 rounded w-full hover:bg-[#A79277]"
            data-amount="<%= total %>"
            data-username="<%= user.name %>"
            data-mail="<%= user.email %>"
            data-phone="<%= user.phone %>"
            id="place-order-btn"
          >
            Place order
          </button>
        </form>
      </div>
    </div>
  </div>
</body>

<!-- footer -->
<%- include('footer') %>

<!-- --------------------------------Address modal------------------------------------- -->

<div
  class="fixed inset-0 z-50 flex justify-center items-center bg-black bg-opacity-50 hidden"
  id="addressModal"
>
  <div class="bg-white rounded-lg shadow-lg w-full max-w-lg">
    <div class="border-b px-6 py-4 flex justify-between items-center">
      <h5 class="text-lg font-semibold">Add New Address</h5>
      <button
        type="button"
        class="text-gray-500 hover:text-black"
        onclick="closeModal()"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="w-6 h-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"
          />
        </svg>
      </button>
    </div>
    <div class="px-6 py-4">
      <form id="addressForm" method="post" action="/checkout-address">
        <div class="mb-4">
          <label
            for="building"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Flat, House no., Building, Company, Apartment</label
          >
          <input
            type="text"
            id="building"
            name="building"
            class="w-full border rounded px-3 py-2 focus:ring focus:ring-blue-500"
            placeholder="Enter your address"
          />
        </div>
        <div class="mb-4">
          <label
            for="street"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Area, Street, Sector, Village</label
          >
          <input
            type="text"
            id="street"
            name="street"
            class="w-full border rounded px-3 py-2 focus:ring focus:ring-blue-500"
            placeholder="Enter your area"
          />
        </div>
        <div class="mb-4">
          <label for="city" class="block text-sm font-medium text-gray-700 mb-1"
            >Town/City</label
          >
          <input
            type="text"
            id="city"
            name="city"
            class="w-full border rounded px-3 py-2 focus:ring focus:ring-blue-500"
            placeholder="Enter your city"
          />
        </div>
        <div class="grid grid-cols-2 gap-4 mb-4">
          <div>
            <label
              for="phonenumber"
              class="block text-sm font-medium text-gray-700 mb-1"
              >Phone Number</label
            >
            <input
              type="tel"
              id="phonenumber"
              name="phonenumber"
              class="w-full border rounded px-3 py-2 focus:ring focus:ring-blue-500"
              placeholder="Contact number"
            />
          </div>
          <div>
            <label
              for="pincode"
              class="block text-sm font-medium text-gray-700 mb-1"
              >Pincode</label
            >
            <input
              type="text"
              id="pincode"
              name="pincode"
              class="w-full border rounded px-3 py-2 focus:ring focus:ring-blue-500"
              placeholder="Enter your pincode"
            />
          </div>
        </div>
        <div class="mb-4">
          <label
            for="landmark"
            class="block text-sm font-medium text-gray-700 mb-1"
            >Landmark</label
          >
          <input
            type="text"
            id="landmark"
            name="landmark"
            class="w-full border rounded px-3 py-2 focus:ring focus:ring-blue-500"
            placeholder="Enter nearest landmark"
          />
        </div>
        <div class="grid grid-cols-2 gap-4 mb-4">
          <div>
            <label
              for="state"
              class="block text-sm font-medium text-gray-700 mb-1"
              >State</label
            >
            <input
              type="text"
              id="state"
              name="state"
              class="w-full border rounded px-3 py-2 focus:ring focus:ring-blue-500"
              placeholder="Enter your state"
            />
          </div>
          <div>
            <label
              for="country"
              class="block text-sm font-medium text-gray-700 mb-1"
              >Country</label
            >
            <input
              type="text"
              id="country"
              name="country"
              class="w-full border rounded px-3 py-2 focus:ring focus:ring-blue-500"
              placeholder="Enter your country"
            />
          </div>
        </div>
        <div class="flex justify-end space-x-4">
          <button
            type="button"
            class="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400"
            onclick="closeModal()"
          >
            Close
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
          >
            Save
          </button>
        </div>
      </form>
    </div>
  </div>
</div>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<!-- Add this script at the bottom of the page -->
<script>
    // //----------------------------------------------------------------------


    document.getElementById('apply-coupon').addEventListener('click', async function() {
      const couponCode = document.getElementById('coupon-code').value;
      const messageElement = document.getElementById('coupon-message');
      const discountElement = document.getElementById('coupon-discount');
      const discountAmountElement = document.getElementById('discount-amount');
      const finalTotalElement = document.getElementById('final-total');
      const total = <%= total %>; 

      if (!couponCode) {
          messageElement.textContent = 'Please enter a coupon code';
          messageElement.className = 'mt-2 text-sm text-red-600';
          return;
      }

      try {
          const response = await fetch('/validate-coupon', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                  couponCode,
                  total
              })
          });

          const data = await response.json();

          if (data.success) {
              messageElement.textContent = data.message;
              messageElement.className = 'mt-2 text-sm text-green-600';

              // Show discount amount
              discountElement.classList.remove('hidden');
              discountAmountElement.textContent = data.discount.toFixed(2);

              // Update final total
              const newTotal = (total - data.discount).toFixed(2);
              finalTotalElement.textContent = newTotal;

              // Store coupon data for order placement
              document.getElementById('place-order-form').dataset.couponCode = couponCode;
              document.getElementById('place-order-form').dataset.discountAmount = data.discount;

              // Show remove button and disable input
              document.getElementById('remove-coupon').classList.remove('hidden');
              document.getElementById('coupon-code').disabled = true;
          } else {
              messageElement.textContent = data.message;
              messageElement.className = 'mt-2 text-sm text-red-600';

              // Reset discount display
              discountElement.classList.add('hidden');
              finalTotalElement.textContent = total.toFixed(2);

              // Clear coupon data
              delete document.getElementById('place-order-form').dataset.couponCode;
              delete document.getElementById('place-order-form').dataset.discountAmount;

              // Hide remove button and enable input
              document.getElementById('remove-coupon').classList.add('hidden');
              document.getElementById('coupon-code').disabled = false;
          }
      } catch (error) {
          console.error('Error applying coupon:', error);
          messageElement.textContent = 'Error applying coupon';
          messageElement.className = 'mt-2 text-sm text-red-600';

          // Hide remove button and enable input
          document.getElementById('remove-coupon').classList.add('hidden');
          document.getElementById('coupon-code').disabled = false;
      }
  });

  // Remove coupon functionality
  document.getElementById('remove-coupon').addEventListener('click', function() {
      const messageElement = document.getElementById('coupon-message');
      const discountElement = document.getElementById('coupon-discount');
      const finalTotalElement = document.getElementById('final-total');
      const total = <%= total %>; // Get the total from server

      // Reset coupon input
      document.getElementById('coupon-code').value = '';
      document.getElementById('coupon-code').disabled = false;

      // Hide discount display
      discountElement.classList.add('hidden');
      finalTotalElement.textContent = total.toFixed(2);

      // Clear coupon data
      delete document.getElementById('place-order-form').dataset.couponCode;
      delete document.getElementById('place-order-form').dataset.discountAmount;

      // Reset message
      messageElement.textContent = '';

      // Hide remove button
      document.getElementById('remove-coupon').classList.add('hidden');
  });

  // Update the place order form submission to include coupon data
  document.getElementById('place-order-form').addEventListener('submit', async function(e) {
      e.preventDefault();

      const formData = {
          addressId: document.querySelector('input[name="addressId"]:checked').value,
          paymentMethod: document.querySelector('input[name="paymentMethod"]:checked').value,
          couponCode: this.dataset.couponCode || null
      };

  });

  function openAddresModal() {
      document.getElementById("addressModal").classList.remove("hidden");
  }

  function closeModal() {
      document.getElementById("addressModal").classList.add("hidden");
  }

  // Function to validate the form
  function validateForm(event) {
    event.preventDefault(); // Prevent form submission

    // Get form fields
    const building = document.getElementById("building");
    const street = document.getElementById("street");
    const city = document.getElementById("city");
    const phonenumber = document.getElementById("phonenumber");
    const pincode = document.getElementById("pincode");
    const landmark = document.getElementById("landmark");
    const state = document.getElementById("state");
    const country = document.getElementById("country");

    let isValid = true;

    // Reset any previous error messages
    document.querySelectorAll(".error").forEach((error) => error.remove());

    // Helper function to display error message
    function showError(input, message) {
        const error = document.createElement("div");
        error.className = "error text-red-500 text-sm mt-1";
        error.textContent = message;
        input.insertAdjacentElement("afterend", error);
        isValid = false;
    }

    // Validate each field
    if (!building.value.trim() || building.value.trim().length > 30 || /[^a-zA-Z0-9 ]/.test(building.value)) {
        showError(building, "Building must be up to 30 characters (letters/numbers only).");
    }
    if (!street.value.trim() || street.value.trim().length > 20 || /[^a-zA-Z0-9 ]/.test(street.value)) {
        showError(street, "Street must be up to 20 characters (letters/numbers only).");
    }
    if (!city.value.trim() || city.value.trim().length > 20 || /[^a-zA-Z ]/.test(city.value)) {
        showError(city, "City must be up to 20 characters (letters only).");
    }
    if (!phonenumber.value.trim() || !/^\d{10}$/.test(phonenumber.value)) {
        showError(phonenumber, "Enter a valid 10-digit phone number.");
    }
    if (!pincode.value.trim() || !/^\d{6}$/.test(pincode.value)) {
        showError(pincode, "Enter a valid 6-digit pincode.");
    }
    if (!landmark.value.trim() || landmark.value.trim().length > 20 || /[^a-zA-Z0-9 ]/.test(landmark.value)) {
        showError(landmark, "Landmark must be up to 20 characters (letters/numbers only).");
    }
    if (!state.value.trim() || state.value.trim().length > 20 || /[^a-zA-Z ]/.test(state.value)) {
        showError(state, "State must be up to 20 characters (letters only).");
    }
    if (!country.value.trim() || country.value.trim().length > 20 || /[^a-zA-Z ]/.test(country.value)) {
        showError(country, "Country must be up to 20 characters (letters only).");
    }

    // If all validations pass, submit the form
    if (isValid) {
        document.getElementById("addressForm").submit();
    }
}

// Attach the validation function to the form
document
    .getElementById("addressForm")
    .addEventListener("submit", validateForm);

</script>







<script>

  document
    .getElementById("place-order-form")
    .addEventListener("submit", async function (e) {
      e.preventDefault();

      try {
        // Validate selections
        const selectedAddress = document.querySelector(
          'input[name="addressId"]:checked'
        );
        const selectedPayment = document.querySelector(
          'input[name="paymentMethod"]:checked'
        );

        if (!selectedAddress || !selectedPayment) {
          throw new Error(
            "Please select both delivery address and payment method"
          );
        }

        // Get amounts and coupon data
        const subtotal = parseFloat(
          document
            .getElementById("subtotal")
            .textContent.replace("Rs.", "")
            .trim()
        );
        const finalTotal = parseFloat(
          document.getElementById("final-total").textContent.trim()
        );
        const couponCode =
          document.getElementById("coupon-code").value.trim() || null;
        const isCouponApplied = !document
          .getElementById("coupon-discount")
          .classList.contains("hidden");

        // Show loading state
        Swal.fire({
          title: "Processing Order...",
          text: "Please wait while we process your order",
          allowOutsideClick: false,
          showConfirmButton: false,
          didOpen: () => {
            Swal.showLoading();
          },
        });

        const orderData = {
          addressId: selectedAddress.value,
          paymentMethod: selectedPayment.value,
          couponCode: isCouponApplied ? couponCode : null,
          totalPrice: subtotal,
          finalAmount: finalTotal,
        };

        if (selectedPayment.value === "Razorpay") {
          // Create Razorpay order first
          const razorpayResponse = await fetch("/create-razorpay-order", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              amount: finalTotal,
              addressId: selectedAddress.value,
            }),
          });

          const razorpayData = await razorpayResponse.json();
          if (!razorpayData.success) {
            throw new Error(razorpayData.message);
          }

          // Initialize Razorpay
          const options = {
            key: razorpayData.key,
            amount: razorpayData.amount,
            currency: "INR",
            name: "Choco Dwelling",
            description: "Order Payment",
            order_id: razorpayData.orderId,
            prefill: {
              name: document.getElementById("place-order-btn").dataset.username,
              email: document.getElementById("place-order-btn").dataset.mail,
              contact: document.getElementById("place-order-btn").dataset.phone,
            },
            handler: async function (response) {
              try {
                // Show loading state
                Swal.fire({
                  title: "Processing Payment...",
                  text: "Please wait while we verify your payment",
                  allowOutsideClick: false,
                  showConfirmButton: false,
                  didOpen: () => {
                    Swal.showLoading();
                  }
                });

                // Only proceed if we have complete payment details
                if (!response.razorpay_payment_id || !response.razorpay_order_id || !response.razorpay_signature) {
                  throw new Error('Payment incomplete');
                }

                const verifyResponse = await fetch("/verify-payment", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    addressId: document.querySelector('input[name="addressId"]:checked').value,
                    paymentMethod: 'Razorpay',
                    couponCode: document.getElementById('coupon-code').value || null,
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_signature: response.razorpay_signature
                  }),
                });

                const result = await verifyResponse.json();
                const orderId = result.orderId;

                if (!result.success) {
                  throw new Error(result.message || 'Payment verification failed');
                }

                // Success case
                Swal.fire({
                  icon: "success",
                  title: "Payment Successful!",
                  text: "Your order has been placed successfully",
                  confirmButtonText: "View Order",
                }).then((result) => {
                  if (result.isConfirmed) {
                    window.location.href = `/orderDetail/${orderId}`;
                  }
                });

              } catch (error) {
                console.error('Payment error:', error);
                Swal.fire({
                  icon: "error",
                  title: "Payment Failed",
                  text: error.message || "Payment could not be completed. No order has been placed.",
                }).then(() => {
                  window.location.href = '/cart';
                });
              }
            },
            modal: {
    ondismiss: function() {
        // Handle payment cancellation
        console.log('Cancelling order:', razorpayData.orderId);
        fetch("/cancel-razorpay-order", {
            method: "POST",
            headers: { 
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                razorpay_order_id: razorpayData.orderId,
                addressId: selectedAddress.value,
                paymentMethod: 'Razorpay',
                couponCode: document.getElementById('coupon-code').value || null,
                totalPrice: subtotal,
                finalAmount: finalTotal
            })
        }).then(response => response.json())
        .then(result => {
            Swal.fire({
                icon: "warning",
                title: "Payment Failed",
                text: "Your payment was failed. order has been placed.",
            }).then(() => {
                window.location.href = '/orders';
            });
        })
        .catch(error => {
            console.error('Error:', error);
            window.location.href = '/orders';
        });
    }
},
            theme: {
              color: "#3B82F6",
            }
          };

          // Initialize Razorpay
          const rzp = new Razorpay(options);
          rzp.open();
          Swal.close(); // Close the loading dialog
        } else {
          // Handle COD and Wallet payments
          const response = await fetch("/place-order", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(orderData),
          });

          const data = await response.json();
          if (!data.success) {
            throw new Error(data.message);
          }

          Swal.fire({
            icon: "success",
            title: "Order Placed!",
            text:
              selectedPayment.value === "Wallet"
                ? "Payment completed using wallet"
                : "Your order has been placed successfully",
            confirmButtonText: "View Order",
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = `/orderDetail/${data.orderId}`;
            }
          });
        }
      } catch (error) {
        console.error("Error placing order:", error);
        Swal.fire({
          icon: "error",
          title: "Order Failed",
          text:
            error.message || "Something went wrong while placing your order",
        });
      }
    });

  // Optional: Add validation before form submission
  document
    .getElementById("place-order-btn")
    .addEventListener("click", function (e) {
      const selectedAddress = document.querySelector(
        'input[name="addressId"]:checked'
      );
      const selectedPayment = document.querySelector(
        'input[name="paymentMethod"]:checked'
      );

      if (!selectedAddress || !selectedPayment) {
        e.preventDefault();
        Swal.fire({
          icon: "error",
          title: "Required Fields Missing",
          text: "Please select both delivery address and payment method",
        });
      }
    });




// Function to handle payment failures
async function handlePaymentFailure(reason) {
    try {
        Swal.fire({
            icon: "error",
            title: "Payment Failed",
            text: reason || "Payment could not be completed",
            confirmButtonText: "OK"
        }).then(() => {
            window.location.href = '/cart';
        });
    } catch (error) {
        console.error("Error handling payment failure:", error);
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Something went wrong while handling payment failure"
        });
    }
}

</script>



<script>

  document
    .getElementById("remove-coupon")
    .addEventListener("click", function () {
      const couponCode = document.getElementById("coupon-code");
      const messageElement = document.getElementById("coupon-message");
      const discountElement = document.getElementById("coupon-discount");
      const discountAmountElement = document.getElementById("discount-amount");
      const finalTotalElement = document.getElementById("final-total");
      const removeCouponBtn = document.getElementById("remove-coupon");
      const total = parseFloat(
        document.getElementById("subtotal").textContent.replace("Rs. ", "")
      );

      // Reset coupon input
      couponCode.value = "";
      couponCode.disabled = false;

      // Hide discount display
      discountElement.classList.add("hidden");
      discountAmountElement.textContent = "0.00";

      // Hide remove button
      removeCouponBtn.classList.add("hidden");

      // Reset message
      messageElement.textContent = "";
      messageElement.className = "mt-2 text-sm";

      // Calculate final total with only delivery charge if applicable
      const deliveryCharge = total < 500 ? 100 : 0;
      const finalTotal = total + deliveryCharge;

      // Update final total display
      finalTotalElement.textContent = finalTotal.toFixed(2);

      // Clear coupon data from form
      const form = document.getElementById("place-order-form");
      delete form.dataset.couponCode;
      delete form.dataset.discountAmount;
      delete form.dataset.finalAmount;

      // Update place order button amount if it exists
      const placeOrderBtn = document.getElementById("place-order-btn");
      if (placeOrderBtn) {
        placeOrderBtn.dataset.amount = finalTotal;
      }
    });

  //--------------------------------------------------------------------------------------
</script>
