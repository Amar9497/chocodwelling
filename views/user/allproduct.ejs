<style>
  body.modal-open {
    overflow: hidden;
  }

  #filterModal {
    transition: opacity 0.3s ease-in-out;
  }

  #filterModal > div {
    transition: transform 0.3s ease-in-out;
  }

  #filterModal.hidden {
    opacity: 0;
    pointer-events: none;
  }

  #filterModal.hidden > div {
    transform: translateX(100%);
  }
</style>

<div class="bg-gray-100 min-h-screen pb-8">
  <!-- Navbar -->
  <%- include('navbar') %>

  <!-- Alert (if applicable) -->
  <%- include('alert') %>

  <!-- Breadcrumb Navigation -->
  <nav class="breadcrumbs text-sm text-gray-600 py-4 bg-gray-50 border-b">
    <ul class="flex items-center space-x-2 container mx-auto px-4 md:px-6">
      <li>
        <a
          href="/home"
          class="text-blue-500 hover:text-blue-700 font-medium transition"
        >
          Home
        </a>
      </li>
      <span class="text-gray-400">/</span>
      <li>
        <a
          href="/allproduct"
          class="text-blue-500 hover:text-blue-700 font-medium transition"
        >
          All Products
        </a>
      </li>
    </ul>
  </nav>

  <!-- Product Section -->
  <div class="container mx-auto px-4 lg:px-8 py-8">
    <!-- Section Header -->
    <div class="flex flex-col sm:flex-row items-center justify-between gap-4 mb-8">
      <h2 class="text-3xl font-bold text-gray-900">Our Products</h2>
      <div class="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
        <!-- Sort Dropdown -->
        <div class="relative flex-grow sm:flex-grow-0">
          <select
            id="sortSelect"
            class="w-full sm:w-56 appearance-none bg-white border border-gray-200 rounded-lg pl-4 pr-10 py-3 text-gray-700 cursor-pointer focus:outline-none focus:ring-2 focus:ring-[#8B7355] focus:border-transparent"
            onchange="Sort()"
          >
            <option value="new">New Arrivals</option>
            <option value="price-low">Price: Low to High</option>
            <option value="price-high">Price: High to Low</option>
            <option value="a-z">Name: A to Z</option>
            <option value="z-a">Name: Z to A</option>
          </select>
          <!-- Custom dropdown arrow -->
          <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
            <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>

        <!-- Filter Button -->
        <button
          id="filterToggleBtn"
          class="w-full sm:w-auto flex items-center justify-center space-x-2 bg-[#8B7355] hover:bg-[#A79277] text-white px-6 py-3 rounded-lg transition-colors duration-200"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h18M7 8h10M10 12h4M12 16h0" />
          </svg>
          <span>Filters</span>
        </button>
      </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 lg:gap-8">
      <% if (product && product.length > 0) { %>
        <% product.forEach(product => { %>
          <div class="group">
            <div class="relative bg-white rounded-2xl shadow-sm hover:shadow-xl transition-all duration-300 overflow-hidden">
              
              <!-- Product Image Container -->
              <div class="relative aspect-[4/3] sm:aspect-square overflow-hidden">
                <a href="/productDetail/<%= product.id %>">
                <img
                  src="<%= product.productImage[0] %>"
                  alt="<%= product.productName %>"
                  class="w-full h-full object-cover transform group-hover:scale-110 transition-transform duration-500"
                />
                </a>
                
                <!-- Wishlist Button -->
                <button
                  onclick="addToWishlist('<%= product._id %>')"
                  class="absolute top-4 right-4 z-10 p-3 rounded-full bg-white/90 backdrop-blur-sm shadow-lg opacity-0 group-hover:opacity-100 transition-all duration-300 hover:bg-[#8B7355] hover:text-white"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                  </svg>
                </button>

                <!-- Discount Badge -->
                <% if (product.productDiscount > 0) { %>
                <div class="absolute top-4 left-4 bg-red-500 text-white px-3 py-1.5 rounded-full text-sm font-semibold shadow-lg">
                  <%= product.productDiscount %>% OFF
                </div>
                <% } %>
              </div>
            

              <!-- Product Info -->
              <div class="p-5">
                <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-1 group-hover:text-[#8B7355] transition-colors">
                  <%= product.productName %>
                </h3>

                <!-- Ratings -->
                <div class="flex items-center gap-1.5 mb-2">
                  <div class="flex">
                    <% for(let i = 1; i <= 5; i++) { %>
                      <% if (i <= Math.round(product.ratings.average)) { %>
                        <!-- Full star -->
                        <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                        </svg>
                      <% } else { %>
                        <!-- Empty star -->
                        <svg class="w-4 h-4 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                        </svg>
                      <% } %>
                    <% } %>
                  </div>
                  <span class="text-sm text-gray-500">
                    (<%= product.ratings.total %> reviews)
                  </span>
                </div>

                <!-- Price and Discount -->
                <div class="flex items-baseline gap-2 mb-3">
                  <% if (product.productDiscount > 0) { %>
                  <span class="text-2xl font-bold text-[#8B7355]">
                    ₹<%= Math.round(product.productVariants[0].price * (1 - product.productDiscount/100)) %>
                  </span>
                  <span class="text-sm text-gray-500 line-through">
                    ₹<%= product.productVariants[0].price %>
                  </span>
                  <% } else { %>
                  <span class="text-2xl font-bold text-[#8B7355]">
                    ₹<%= product.productVariants[0].price %>
                  </span>
                  <% } %>
                </div>

                <!-- Description -->
                <p class="text-sm text-gray-600 line-clamp-2 mb-4 min-h-[2.5rem]">
                  <%= product.productDescription %>
                </p>

                <!-- Action Buttons -->
                <div class="flex gap-2">
                  <button
                    onclick="addToCart('<%= product._id %>')"
                    class="flex-1 bg-[#8B7355] text-white py-2.5 rounded-lg hover:bg-[#A79277] transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-[#8B7355] focus:ring-offset-2"
                  >
                    Add to Cart
                  </button>
                  
                </div>
              </div>
            </div>
          </div>
        <% }); %>
      <% } else { %>
        <div class="col-span-full flex flex-col items-center justify-center py-12 px-4">
          <div class="text-center">
            <svg class="mx-auto h-16 w-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
            <h3 class="mt-4 text-lg font-medium text-gray-900">No Products Found</h3>
            <p class="mt-2 text-sm text-gray-500">
              We couldn't find any products matching your search criteria.
            </p>
            <a href="/allproduct" class="mt-4 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-[#8B7355] hover:bg-[#A79277] transition-colors duration-300">
              View All Products
            </a>
          </div>
        </div>
      <% } %>
    </div>

    <!-- Add this after your products grid, before the closing container div -->
    <div class="mt-8 flex justify-center">
        <div class="flex items-center gap-2">
            <% if (currentPage > 1) { %>
                <a href="?page=<%= currentPage - 1 %>&limit=<%= limit %>&sort=<%= sort %><%= search ? `&search=${search}` : '' %><%= typeof categories !== 'undefined' && categories.length ? `&categories=${categories}` : '' %><%= typeof minPrice !== 'undefined' && minPrice ? `&minPrice=${minPrice}` : '' %><%= typeof maxPrice !== 'undefined' && maxPrice ? `&maxPrice=${maxPrice}` : '' %>"
                    class="px-3 py-2 rounded-lg border border-gray-300 hover:bg-gray-50 text-gray-700">
                    Previous
                </a>
            <% } %>

            <% for(let i = 1; i <= totalPages; i++) { %>
                <a href="?page=<%= i %>&limit=<%= limit %>&sort=<%= sort %><%= search ? `&search=${search}` : '' %><%= typeof categories !== 'undefined' && categories.length ? `&categories=${categories}` : '' %><%= typeof minPrice !== 'undefined' && minPrice ? `&minPrice=${minPrice}` : '' %><%= typeof maxPrice !== 'undefined' && maxPrice ? `&maxPrice=${maxPrice}` : '' %>"
                    class="px-4 py-2 rounded-lg <%= currentPage === i ? 'bg-[#8B7355] text-white' : 'border border-gray-300 hover:bg-gray-50 text-gray-700' %>">
                    <%= i %>
                </a>
            <% } %>

            <% if (currentPage < totalPages) { %>
                <a href="?page=<%= currentPage + 1 %>&limit=<%= limit %>&sort=<%= sort %><%= search ? `&search=${search}` : '' %><%= typeof categories !== 'undefined' && categories.length ? `&categories=${categories}` : '' %><%= typeof minPrice !== 'undefined' && minPrice ? `&minPrice=${minPrice}` : '' %><%= typeof maxPrice !== 'undefined' && maxPrice ? `&maxPrice=${maxPrice}` : '' %>"
                    class="px-3 py-2 rounded-lg border border-gray-300 hover:bg-gray-50 text-gray-700">
                    Next
                </a>
            <% } %>

            
        </div>
    </div>
  </div>
</div>
<!-- Footer -->
<%- include('footer') %>

<!-- Filter Modal -->
<div id="filterModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
  <div
    class="fixed inset-y-0 right-0 max-w-md w-full bg-white shadow-lg flex flex-col"
  >
    <!-- Modal Header -->
    <div class="flex justify-between items-center p-4 border-b">
      <h3 class="text-lg font-semibold">Filters</h3>
      <button
        onclick="toggleFilterModal()"
        class="text-gray-500 hover:text-gray-700"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"
          />
        </svg>
      </button>
    </div>

    <!-- Modal Content -->
    <div class="p-4 overflow-y-auto flex-grow">
      <!-- Category Filters -->
      <div class="mb-6">
        <h4 class="font-medium mb-3">Categories</h4>
        <div class="space-y-2">
          <% category.forEach(cat => { %>
          <label class="flex items-center space-x-2">
            <input
              type="checkbox"
              name="category"
              value="<%= cat._id %>"
              class="form-checkbox text-[#A79277]"
              onchange="handleFilters()"
            />
            <span class="text-gray-700"><%= cat.categoryName %></span>
          </label>
          <% }); %>
        </div>
      </div>

      <!-- Price Range -->
      <div class="mb-6">
        <h4 class="font-medium mb-3">Price Range</h4>
        <div class="flex items-center space-x-4">
          <input
            type="number"
            id="minPrice"
            placeholder="Min"
            class="w-1/2 border rounded-lg p-2"
            onchange="handleFilters()"
          />
          <input
            type="number"
            id="maxPrice"
            placeholder="Max"
            class="w-1/2 border rounded-lg p-2"
            onchange="handleFilters()"
          />
        </div>
      </div>
    </div>

    <!-- Modal Footer -->
    <div class="p-4 bg-white border-t">
      <div class="flex space-x-4">
        <button
          onclick="clearFilters()"
          class="w-1/2 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Clear All
        </button>
        <button
          onclick="applyFilters()"
          class="w-1/2 py-2 bg-[#A79277] text-white rounded-lg hover:bg-[#8B7B64]"
        >
          Apply Filters
        </button>
      </div>
    </div>
  </div>
</div>

<div
  id="filterModal"
  class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden transition-opacity duration-300 ease-in-out"
>
  <div
    class="fixed inset-y-0 right-0 max-w-sm w-full bg-white shadow-xl transform translate-x-full transition-transform duration-300 ease-in-out"
  >
    <!-- Modal Header -->
    <div class="flex justify-between items-center p-4 border-b">
      <h3 class="text-lg font-semibold text-gray-800">Filters</h3>
      <button
        onclick="toggleFilterModal()"
        class="text-gray-500 hover:text-gray-700 focus:outline-none"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"
          />
        </svg>
      </button>
    </div>

    <!-- Modal Content -->
    <div class="p-4 overflow-y-auto h-full pb-32">
      <!-- Category Filters -->
      <div class="mb-6">
        <h4 class="text-gray-800 font-medium mb-3">Categories</h4>
        <div class="space-y-2">
          <% category.forEach(cat => { %>
          <label class="flex items-center space-x-2">
            <input
              type="checkbox"
              name="category"
              value="<%= cat._id %>"
              class="form-checkbox text-[#A79277] focus:ring-[#A79277]"
              onchange="handleFilters()"
            />
            <span class="text-gray-700"><%= cat.categoryName %></span>
          </label>
          <% }); %>
        </div>
      </div>

      <!-- Price Range -->
      <div class="mb-6">
        <h4 class="text-gray-800 font-medium mb-3">Price Range</h4>
        <div class="flex items-center space-x-4">
          <input
            type="number"
            id="minPrice"
            placeholder="Min"
            class="w-1/2 border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-[#A79277] focus:border-[#A79277]"
            onchange="handleFilters()"
          />
          <input
            type="number"
            id="maxPrice"
            placeholder="Max"
            class="w-1/2 border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-[#A79277] focus:border-[#A79277]"
            onchange="handleFilters()"
          />
        </div>
      </div>
    </div>

    <!-- Modal Footer -->
    <div class="fixed bottom-0 left-0 right-0 p-4 bg-white border-t">
      <div class="flex space-x-4">
        <button
          onclick="clearFilters()"
          class="w-1/2 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none"
        >
          Clear All
        </button>
        <button
          onclick="applyFilters()"
          class="w-1/2 py-2 bg-[#A79277] text-white rounded-lg hover:bg-[#8B7B64] focus:outline-none focus:ring-2 focus:ring-[#8B7B64]"
        >
          Apply Filters
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  function Sort() {
    const sortSelect = document.getElementById("sortSelect");
    const sortValue = sortSelect.value;

    const params = new URLSearchParams(window.location.search);

    params.set("sort", sortValue);

    window.location.href = `/allproduct?${params.toString()}`;
  }

  // Update initializeFilters to include sort
  function initializeFilters() {
    const params = new URLSearchParams(window.location.search);

    // Set category checkboxes
    const categories = params.get("categories")?.split(",") || [];
    categories.forEach((catId) => {
      const checkbox = document.querySelector(`input[value="${catId}"]`);
      if (checkbox) checkbox.checked = true;
    });

    // Set price inputs
    const minPrice = params.get("minPrice");
    const maxPrice = params.get("maxPrice");
    if (minPrice) document.getElementById("minPrice").value = minPrice;
    if (maxPrice) document.getElementById("maxPrice").value = maxPrice;

    // Set sort select
    const sortValue = params.get("sort");
    if (sortValue) {
      document.getElementById("sortSelect").value = sortValue;
    }
  }

  // Update handleFilters to preserve sort
  function handleFilters() {
    const selectedCategories = Array.from(
      document.querySelectorAll('input[name="category"]:checked')
    ).map((checkbox) => checkbox.value);

    const minPrice = document.getElementById("minPrice").value;
    const maxPrice = document.getElementById("maxPrice").value;

    const params = new URLSearchParams(window.location.search);

    // Preserve sort parameter if it exists
    const currentSort = params.get("sort");

    // Reset params but keep sort if it exists
    params.forEach((value, key) => {
      if (key !== "sort") {
        params.delete(key);
      }
    });

    if (selectedCategories.length > 0) {
      params.set("categories", selectedCategories.join(","));
    }

    if (minPrice) params.set("minPrice", minPrice);
    if (maxPrice) params.set("maxPrice", maxPrice);

    // Add back sort parameter if it existed
    if (currentSort) {
      params.set("sort", currentSort);
    }

    window.location.href = `/allproduct?${params.toString()}`;
  }
</script>

<script>
  let filtersChanged = false;

  function toggleFilterModal() {
    const modal = document.getElementById("filterModal");
    const body = document.body;

    if (modal.classList.contains("hidden")) {
      modal.classList.remove("hidden");
      body.style.overflow = "hidden";
    } else {
      modal.classList.add("hidden");
      body.style.overflow = "";
    }
  }

  function handleFilters() {
    filtersChanged = true;
  }

  function applyFilters() {
    const selectedCategories = Array.from(
      document.querySelectorAll('input[name="category"]:checked')
    ).map((checkbox) => checkbox.value);

    const minPrice = document.getElementById("minPrice").value;
    const maxPrice = document.getElementById("maxPrice").value;

    const params = new URLSearchParams(window.location.search);

    // Preserve sort parameter
    const currentSort = params.get("sort");

    // Reset params but keep sort if it exists
    params.forEach((value, key) => {
      if (key !== "sort") {
        params.delete(key);
      }
    });

    if (selectedCategories.length > 0) {
      params.set("categories", selectedCategories.join(","));
    }

    if (minPrice) params.set("minPrice", minPrice);
    if (maxPrice) params.set("maxPrice", maxPrice);

    // Add back sort parameter if it existed
    if (currentSort) {
      params.set("sort", currentSort);
    }

    toggleFilterModal(); // Close the modal
    window.location.href = `/allproduct?${params.toString()}`;
  }

  function clearFilters() {
    document.querySelectorAll('input[name="category"]').forEach((checkbox) => {
      checkbox.checked = false;
    });

    document.getElementById("minPrice").value = "";
    document.getElementById("maxPrice").value = "";

    const params = new URLSearchParams(window.location.search);
    const currentSort = params.get("sort");

    if (currentSort) {
      window.location.href = `/allproduct?sort=${currentSort}`;
    } else {
      window.location.href = "/allproduct";
    }
  }

  // Add click event listener to the filter button
  document
    .getElementById("filterToggleBtn")
    .addEventListener("click", toggleFilterModal);

  // Close modal when clicking outside
  document
    .getElementById("filterModal")
    .addEventListener("click", function (event) {
      if (event.target === this) {
        toggleFilterModal();
      }
    });

  // Initialize filters when page loads
  document.addEventListener("DOMContentLoaded", function () {
    initializeFilters();

    // Add event listener for escape key to close modal
    document.addEventListener("keydown", function (event) {
      if (event.key === "Escape") {
        const modal = document.getElementById("filterModal");
        if (!modal.classList.contains("hidden")) {
          toggleFilterModal();
        }
      }
    });
  });


  // add wishlist

async function addToWishlist(productId) {
    try {
        const response = await fetch(`/add-wishlist/${productId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();

        if (!response.ok) {
            // Handle unauthorized (not logged in) case
            if (response.status === 401) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please Login',
                    text: 'You need to login to add items to wishlist',
                    showCancelButton: true,
                    confirmButtonText: 'Login',
                    confirmButtonColor: '#8B7355',
                    cancelButtonColor: '#d33',
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/login';
                    }
                });
                return;
            }
            
            // Handle already in wishlist case
            if (response.status === 400) {
                Swal.fire({
                    icon: 'info',
                    title: 'Already in Wishlist',
                    text: 'This item is already in your wishlist',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    customClass: {
                        popup: 'colored-toast'
                    }
                });
                return;
            }

            throw new Error(data.message || 'Failed to add to wishlist');
        }

        // Success case
        const wishlistIcon = document.getElementById(`wishlist-icon-${productId}`);
        if (wishlistIcon) {
            wishlistIcon.setAttribute('fill', 'red');
        }

        Swal.fire({
            icon: 'success',
            title: 'Added to Wishlist!',
            text: 'Item successfully added to your wishlist',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            customClass: {
                popup: 'colored-toast'
            }
        });

    } catch (error) {
        console.error('Error adding to wishlist:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Something went wrong!',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            customClass: {
                popup: 'colored-toast'
            }
        });
    }
}


// add to cart


async function addToCart(productId) {
    try {
        const response = await fetch("/addToCart", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                productId: productId,
                quantity: 1, // Default to 1 for direct add-to-cart from listing
            }),
        });

        const data = await response.json();

        if (!response.ok) {
            // Handle unauthorized (not logged in) case
            if (response.status === 401) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please Login',
                    text: 'You need to login to add items to cart',
                    showCancelButton: true,
                    confirmButtonText: 'Login',
                    confirmButtonColor: '#8B7355',
                    cancelButtonColor: '#d33',
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/login';
                    }
                });
                return;
            }
            
            throw new Error(data.message || 'Failed to add to cart');
        }

        // Success case
        Swal.fire({
            icon: 'success',
            title: 'Added to Cart!',
            text: data.message || 'Item successfully added to your cart',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            customClass: {
                popup: 'colored-toast'
            }
        });

        // Update cart count if it exists
        const cartCountElement = document.getElementById("cart-count");
        if (cartCountElement) {
            const currentCount = parseInt(cartCountElement.textContent || '0');
            cartCountElement.textContent = currentCount + 1;
        }

    } catch (error) {
        console.error('Error adding to cart:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Something went wrong!',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            customClass: {
                popup: 'colored-toast'
            }
        });
    }
}


</script>
