<div class="bg-gray-50 min-h-screen">
  <%- include('navbar') %>
  <%- include('alert') %>

  <!-- Hero Banner with Brand Info -->
  <div class="relative h-[40vh] md:h-[50vh]">
    <img 
      src="<%= brand.brandImage %>" 
      alt="<%= brand.brandName %>"
      class="w-full h-full object-cover"
    />
    <div class="absolute inset-0 bg-gradient-to-t from-black via-black/50 to-transparent">
      <div class="container mx-auto px-4 h-full flex flex-col justify-end pb-12">
        <!-- Breadcrumb -->
        <nav class="text-sm mb-4">
          <ol class="flex items-center space-x-2">
            <li><a href="/home" class="text-gray-300 hover:text-white transition">Home</a></li>
            <span class="text-gray-400">/</span>
            <li><a href="/brands" class="text-gray-300 hover:text-white transition">Brands</a></li>
            <span class="text-gray-400">/</span>
            <li class="text-white font-medium"><%= brand.brandName %></li>
          </ol>
        </nav>
        <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-4"><%= brand.brandName %></h1>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="container mx-auto px-4 py-8">
    <!-- Header Section -->
    <div class="flex flex-col md:flex-row justify-between items-center mb-8 gap-4">
      <div>
        <h2 class="text-2xl font-bold text-gray-900">Products</h2>
        <p class="text-gray-600 mt-1">Showing <%= products.length %> products</p>
      </div>
      
      <!-- Sort Controls -->
      <div class="w-full md:w-auto">
        <select 
          id="sortSelect" 
          class="w-full md:w-64 bg-white border border-gray-200 rounded-lg px-4 py-2.5 text-gray-700 cursor-pointer focus:outline-none focus:ring-2 focus:ring-[#8B7355] focus:border-transparent shadow-sm"
          onchange="Sort()"
        >
          <option value="new">New Arrivals</option>
          <option value="price-low">Price: Low to High</option>
          <option value="price-high">Price: High to Low</option>
          <option value="a-z">Name: A to Z</option>
          <option value="z-a">Name: Z to A</option>
        </select>
      </div>
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 lg:gap-8">
      <% products.forEach(product => { %>
      <div class="group">
        <div class="relative bg-white rounded-2xl shadow-sm hover:shadow-xl transition-all duration-300 overflow-hidden">
          <!-- Product Image Container -->
          <div class="relative aspect-square overflow-hidden">
            <img
              src="<%= product.productImage[0] %>"
              alt="<%= product.productName %>"
              class="w-full h-full object-cover transform group-hover:scale-110 transition-transform duration-500"
            />
            
            <!-- Wishlist Button -->
            <button
              onclick="addToWishlist('<%= product._id %>')"
              class="absolute top-4 right-4 z-10 p-3 rounded-full bg-white/90 backdrop-blur-sm shadow-lg opacity-0 group-hover:opacity-100 transition-all duration-300 hover:bg-[#8B7355] hover:text-white"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
              </svg>
            </button>

            <!-- Discount Badge -->
            <% if (product.productDiscount > 0) { %>
            <div class="absolute top-4 left-4 bg-red-500 text-white px-3 py-1.5 rounded-full text-sm font-semibold shadow-lg">
              <%= product.productDiscount %>% OFF
            </div>
            <% } %>

            <!-- Quick View Overlay -->
            <div class="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
              <a
                href="/productDetail/<%= product._id %>"
                class="bg-white/90 backdrop-blur-sm text-gray-900 px-6 py-2.5 rounded-full hover:bg-[#8B7355] hover:text-white transition-all duration-300 transform translate-y-4 group-hover:translate-y-0"
              >
                Quick View
              </a>
            </div>
          </div>

          <!-- Product Info -->
          <div class="p-5">
            <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-1 group-hover:text-[#8B7355] transition-colors">
              <%= product.productName %>
            </h3>

            <!-- Ratings -->
            <div class="flex items-center gap-1.5 mb-3">
              <div class="flex">
                <% for(let i = 1; i <= 5; i++) { %>
                  <% if (i <= Math.round(product.ratings.average)) { %>
                    <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                    </svg>
                  <% } else { %>
                    <svg class="w-4 h-4 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                    </svg>
                  <% } %>
                <% } %>
              </div>
              <span class="text-sm text-gray-500">
                (<%= product.ratings.total %> reviews)
              </span>
            </div>

            <!-- Price and Description -->
            <div class="space-y-3">
              <div class="flex items-center justify-between">
                <div class="flex items-baseline gap-2">
                  <span class="text-2xl font-bold text-[#8B7355]">
                    ₹<%= Math.round(product.productVariants[0].price * (1 - product.productDiscount/100)) %>
                  </span>
                  <% if (product.productDiscount > 0) { %>
                    <span class="text-sm text-gray-500 line-through">
                      ₹<%= product.productVariants[0].price %>
                    </span>
                  <% } %>
                </div>
              </div>
              
              <p class="text-sm text-gray-600 line-clamp-2 min-h-[2.5rem]">
                <%= product.productDescription %>
              </p>
            </div>

            <!-- Add to Cart Button -->
            <button
              onclick="addToCart('<%= product._id %>')"
              class="w-full mt-4 bg-[#8B7355] text-white py-2.5 rounded-lg hover:bg-[#A79277] transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-[#8B7355] focus:ring-offset-2"
            >
              Add to Cart
            </button>
          </div>
        </div>
      </div>
      <% }); %>
    </div>

    <!-- Pagination -->
    <% if (totalPages > 1) { %>
    <div class="mt-12 flex justify-center">
      <div class="inline-flex rounded-lg shadow-sm">
        <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %>&sort=<%= sort %>" 
             class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-200 rounded-l-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#8B7355] focus:z-10">
            Previous
          </a>
        <% } %>
        
        <% for(let i = 1; i <= totalPages; i++) { %>
          <a href="?page=<%= i %>&sort=<%= sort %>" 
             class="px-4 py-2 text-sm font-medium <%= currentPage == i ? 'text-white bg-[#8B7355] border-[#8B7355] hover:bg-[#A79277]' : 'text-gray-700 bg-white border-gray-200 hover:bg-gray-50' %> border-t border-b focus:outline-none focus:ring-2 focus:ring-[#8B7355] focus:z-10">
            <%= i %>
          </a>
        <% } %>
        
        <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %>&sort=<%= sort %>" 
             class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-200 rounded-r-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#8B7355] focus:z-10">
            Next
          </a>
        <% } %>
      </div>
    </div>
    <% } %>
  </div>
</div>

<%- include('footer') %>

<script>
function Sort() {
    const sortSelect = document.getElementById("sortSelect");
    const mobileSortSelect = document.getElementById("mobileSortSelect");
    const sortValue = (window.innerWidth >= 1024) ? sortSelect.value : mobileSortSelect.value;
    
    const params = new URLSearchParams(window.location.search);
    params.set('sort', sortValue);
    
    window.location.href = window.location.pathname + '?' + params.toString();
}

function applyFilters() {
    const minPrice = document.getElementById('minPrice').value;
    const maxPrice = document.getElementById('maxPrice').value;
    
    const params = new URLSearchParams(window.location.search);
    if (minPrice) params.set('minPrice', minPrice);
    if (maxPrice) params.set('maxPrice', maxPrice);
    
    window.location.href = window.location.pathname + '?' + params.toString();
}

// Initialize sort values
document.addEventListener('DOMContentLoaded', function() {
    const params = new URLSearchParams(window.location.search);
    const sortValue = params.get('sort');
    if (sortValue) {
        document.getElementById("sortSelect").value = sortValue;
        document.getElementById("mobileSortSelect").value = sortValue;
    }
});

// add wishlist

async function addToWishlist(productId) {
    try {
        const response = await fetch(`/add-wishlist/${productId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();

        if (!response.ok) {
            // Handle unauthorized (not logged in) case
            if (response.status === 401) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please Login',
                    text: 'You need to login to add items to wishlist',
                    showCancelButton: true,
                    confirmButtonText: 'Login',
                    confirmButtonColor: '#8B7355',
                    cancelButtonColor: '#d33',
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/login';
                    }
                });
                return;
            }
            
            // Handle already in wishlist case
            if (response.status === 400) {
                Swal.fire({
                    icon: 'info',
                    title: 'Already in Wishlist',
                    text: 'This item is already in your wishlist',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    customClass: {
                        popup: 'colored-toast'
                    }
                });
                return;
            }

            throw new Error(data.message || 'Failed to add to wishlist');
        }

        // Success case
        const wishlistIcon = document.getElementById(`wishlist-icon-${productId}`);
        if (wishlistIcon) {
            wishlistIcon.setAttribute('fill', 'red');
        }

        Swal.fire({
            icon: 'success',
            title: 'Added to Wishlist!',
            text: 'Item successfully added to your wishlist',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            customClass: {
                popup: 'colored-toast'
            }
        });

    } catch (error) {
        console.error('Error adding to wishlist:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Something went wrong!',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            customClass: {
                popup: 'colored-toast'
            }
        });
    }
}

// add to cart


async function addToCart(productId) {
    try {
        const response = await fetch("/addToCart", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                productId: productId,
                quantity: 1, // Default to 1 for direct add-to-cart from listing
            }),
        });

        const data = await response.json();

        if (!response.ok) {
            // Handle unauthorized (not logged in) case
            if (response.status === 401) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please Login',
                    text: 'You need to login to add items to cart',
                    showCancelButton: true,
                    confirmButtonText: 'Login',
                    confirmButtonColor: '#8B7355',
                    cancelButtonColor: '#d33',
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/login';
                    }
                });
                return;
            }
            
            throw new Error(data.message || 'Failed to add to cart');
        }

        // Success case
        Swal.fire({
            icon: 'success',
            title: 'Added to Cart!',
            text: data.message || 'Item successfully added to your cart',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            customClass: {
                popup: 'colored-toast'
            }
        });

        // Update cart count if it exists
        const cartCountElement = document.getElementById("cart-count");
        if (cartCountElement) {
            const currentCount = parseInt(cartCountElement.textContent || '0');
            cartCountElement.textContent = currentCount + 1;
        }

    } catch (error) {
        console.error('Error adding to cart:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Something went wrong!',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            customClass: {
                popup: 'colored-toast'
            }
        });
    }
}


</script>