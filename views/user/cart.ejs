<body class="text-gray-800 min-h-screen">
  <!-- Navbar -->
  <header><%- include('navbar') %></header>

  <!-- Main Content -->
  <main class="container mx-auto px-4 py-10">
    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Cart Table Section -->
      <section class="flex-1 bg-white shadow-lg rounded-lg p-6">
        <h2 class="text-2xl font-bold text-gray-700 mb-6">Your Cart</h2>
        <table class="w-full border-collapse text-left text-gray-700">
          <thead>
            <tr class="bg-gray-100 text-gray-600 uppercase text-sm">
              <th class="p-4">Product</th>
              <th class="p-4">Details</th>
              <th class="p-4">Price</th>
              <th class="p-4">Quantity</th>
              <th class="p-4">Subtotal</th>
              <th class="p-4">Action</th>
            </tr>
          </thead>
          <tbody>
            <% if (cartItems.length) { %> <% cartItems.forEach(item => { %>
            <tr class="border-b hover:bg-gray-50 transition">
              <td class="p-4">
                <img
                  src="<%= item.product.productImage[0] %>"
                  alt="Product Image"
                  class="w-16 h-16 object-cover rounded-lg"
                />
              </td>
              <td class="p-4">
                <h3 class="font-medium"><%= item.product.productName %></h3>
                <p class="text-sm text-gray-500">
                  Weight: <%= item.product.productVariants[0].weight %>
                </p>
              </td>
              <td class="p-4">
                Rs. <%= item.product.productVariants[0].price %>
              </td>
              <td class="p-4">
                <div class="flex items-center space-x-2">
                  <button
                    onclick="updateQuantity('<%= item.product._id %>', -1)"
                    class="bg-gray-200 px-2 py-1 rounded"
                  >
                    -
                  </button>
                  <span id="quantity-<%= item.product._id %>"
                    ><%= item.quantity %></span
                  >
                  <button
                    onclick="updateQuantity('<%= item.product._id %>', 1)"
                    class="bg-gray-200 px-2 py-1 rounded"
                  >
                    +
                  </button>
                </div>
              </td>
              <td
                class="p-4 font-semibold"
                id="subtotal-<%= item.product._id %>"
              >
                Rs. <%= item.product.productVariants[0].price * item.quantity %>
              </td>
              <td class="p-4 text-center">
                <button
                  onclick="removeFromCart('<%= item.product._id %>')"
                  class="text-red-500 hover:text-red-600"
                >
                  <i class="fas fa-trash"></i>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 7L5 7M10 11V17M14 11V17M5 7L7 21H17L19 7H5Z"
                    />
                  </svg>
                </button>
              </td>
            </tr>
            <% }); %> <% } else { %>
            <tr>
              <td
                colspan="6"
                class="text-center font-semibold p-4 text-gray-600"
              >
                Your cart is empty.
              </td>
            </tr>
            <% } %>
          </tbody>
        </table>
      </section>

      <!-- Cart Totals Section -->
      <aside class="w-full lg:w-1/4 bg-white shadow-lg rounded-lg p-6">
        <h2 class="text-2xl font-bold text-gray-700 mb-6 text-center">
          Cart Totals
        </h2>
        <div class="flex justify-between items-center mb-4">
          <span class="text-gray-600">Subtotal</span>
          <span class="font-medium">Rs. <%= total %></span>
        </div>
        <div
          class="flex justify-between items-center border-t border-gray-200 pt-4"
        >
          <span class="text-gray-800 font-bold">Total</span>
          <span id="total" class="text-red-500 font-bold"
            >Rs. <%= total %></span
          >
        </div>
        <button
          class="mt-6 w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-3 rounded-lg transition"
          onclick="window.location.href = '/checkout';"
        >
          Check Out
        </button>
      </aside>
    </div>
  </main>

  <!-- Footer -->
  <footer><%- include('footer') %></footer>
</body>
<script>
  async function updateQuantity(productId, change) {
    const quantitySpan = document.getElementById(`quantity-${productId}`);
    const currentQuantity = parseInt(quantitySpan.textContent);
    const newQuantity = currentQuantity + change;

    // Don't allow quantity below 1
    if (newQuantity < 1) {
      Swal.fire({
        icon: "warning",
        text: "Quantity cannot be less than 1",
        toast: true,
        position: "top-end",
        timer: 2000,
        showConfirmButton: false,
      });
      return;
    }

    try {
      const response = await fetch("/updateCart", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          productId: productId,
          quantity: newQuantity,
        }),
      });

      const data = await response.json();

      if (data.status) {
        // Update quantity display
        quantitySpan.textContent = newQuantity;

        // Update product subtotal
        const subtotalElement = document.getElementById(
          `subtotal-${productId}`
        );
        subtotalElement.textContent = `Rs. ${data.subtotal}`;

        // Update cart total
        const cartTotalElement = document.getElementById("total");
        cartTotalElement.textContent = `Rs. ${data.total}`;

        // Optional: Show success message
        Swal.fire({
          icon: "success",
          text: "Cart updated",
          toast: true,
          position: "top-end",
          timer: 1500,
          showConfirmButton: false,
        });
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      console.error("Error updating cart:", error);
      Swal.fire({
        icon: "error",
        text: error.message || "Failed to update cart",
        toast: true,
        position: "top-end",
        timer: 2000,
        showConfirmButton: false,
      });
    }
  }

  // remove product
  async function removeFromCart(productId) {
    // Show confirmation dialog
    const result = await Swal.fire({
      title: "Are you sure?",
      text: "You want to remove this item from cart?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "Yes, remove it!",
      cancelButtonText: "Cancel",
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch("/removeFromCart", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ productId }),
        });

        const data = await response.json();

        if (data.status) {
          // Remove the product row from the table
          const productRow = document.getElementById(`cart-item-${productId}`);
          if (productRow) {
            productRow.remove();
          }

          // Update cart summary
          if (data.total !== undefined) {
            const subtotalElement = document.getElementById("cart-subtotal");
            const totalElement = document.getElementById("cart-total");

            if (subtotalElement) {
              subtotalElement.textContent = `Rs. ${data.total.toFixed(2)}`;
            }
            if (totalElement) {
              totalElement.textContent = `Rs. ${data.total.toFixed(2)}`;
            }
          }

          // Show success message
          Swal.fire({
            icon: "success",
            title: "Removed!",
            text: "Item has been removed from cart",
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 1500,
          });

          // If cart is empty, refresh the page or show empty cart message
          if (data) {
            location.reload();
          }
        } else {
          throw new Error(data.message || "Failed to remove item");
        }
      } catch (error) {
        console.error("Error removing item:", error);
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: error.message || "Something went wrong!",
          toast: true,
          position: "top-end",
          timer: 2000,
        });
      }
    }
  }
  // checkout
</script>
