<div class="bg-pink-50 font-sans min-h-screen flex flex-col">
  <!-- Navbar -->
  <%- include('navbar') %> <%- include('alert') %>

  <!-- OTP Section -->
  <main class="flex justify-center items-center flex-1 bg-gray-100 px-4">
    <div class="bg-white p-8 rounded-lg shadow-md max-w-md w-full mt-20 mb-20">
      <h2 class="text-2xl font-bold text-center text-[#A79277] mb-6">
        Enter the OTP
      </h2>
      <form class="space-y-6" action="/forgotPasswordOtp" method="post" id="otpForm">
        <div class="flex justify-center space-x-4">
          <% for (let i = 1; i <= 4; i++) { %>
          <input
            type="text"
            minlength="1"
            maxlength="1"
            name="otp<%= i %>"
            required
            class="otp-input w-12 h-12 sm:w-14 sm:h-14 border border-gray-300 rounded-md text-center text-xl focus:outline-none focus:ring-2 focus:ring-[#A79277] focus:border-transparent"
            autocomplete="off"
            aria-label="OTP digit <%= i %>"
          />
          <% } %>
        </div>
        <input type="hidden" name="otp" id="otp" />
        <input type="hidden" name="otpTime" value="<%= otpTime %>" id="otpTime" />

        <div id="otpTimer" class="text-center text-gray-600 text-sm">
          Time remaining: <span id="timer">02:00</span>
        </div>

        <button
          type="submit"
          id="verify-btn"
          class="w-full bg-[#A79277] text-white py-3 rounded-lg hover:bg-[#855F4A] transition duration-200 focus:outline-none focus:ring-2 focus:ring-[#A79277] focus:ring-offset-2"
        >
          Submit
        </button>
      </form>
      <p class="text-center text-gray-600 mt-6">
        Didn't get the OTP?
        <a
          href="/forgotpassword-resendotp"
          class="text-[#A79277] font-medium hover:underline hidden"
          id="resend-btn"
        >
          Resend
        </a>
      </p>
    </div>
  </main>

  <!-- Footer -->
  <%- include('footer') %>
</div>

<script>
  const otpInputs = document.querySelectorAll(".otp-input");
  const hiddenOtpInput = document.getElementById("otp");
  const otpTimer = document.getElementById("timer");
  const otpTime = parseInt(document.getElementById("otpTime").value);
  const duration = 60 * 2 * 1000; // 2 minutes in milliseconds
  const verifyBtn = document.getElementById("verify-btn");
  const resendBtn = document.getElementById("resend-btn");

  // Handle OTP input and focus movement
  otpInputs.forEach((input, index) => {
    input.addEventListener("input", () => {
      if (input.value.length === input.maxLength) {
        const nextInput = otpInputs[index + 1];
        if (nextInput) nextInput.focus();
      }
      updateHiddenOtpInput();
    });

    input.addEventListener("keydown", (event) => {
      if (event.key === "Backspace" && input.value.length === 0) {
        const prevInput = otpInputs[index - 1];
        if (prevInput) prevInput.focus();
      }
    });
  });

  function updateHiddenOtpInput() {
    let otpValue = "";
    otpInputs.forEach((input) => {
      otpValue += input.value;
    });
    hiddenOtpInput.value = otpValue;
  }

  // Updated countdown timer function
  function countDown() {
    const interval = setInterval(() => {
      const now = Date.now();
      let remain = duration - (now - otpTime);

      if (remain <= 0) {
        // Timer expired
        otpTimer.textContent = "Time Expired!";
        verifyBtn.disabled = true;
        verifyBtn.classList.add('opacity-50', 'cursor-not-allowed');
        resendBtn.classList.remove('hidden');
        clearInterval(interval);

        // Clear and disable OTP inputs
        otpInputs.forEach(input => {
          input.value = '';
          input.disabled = true;
        });
        hiddenOtpInput.value = '';

      } else {
        // Timer still running
        const min = Math.floor((remain % (1000 * 60 * 60)) / (1000 * 60));
        const sec = Math.floor((remain % (1000 * 60)) / 1000);
        otpTimer.textContent = `${min}:${sec < 10 ? "0" : ""}${sec}`;
        
        // Hide resend button while timer is active
        resendBtn.classList.add('hidden');
        
        // Enable inputs and verify button
        otpInputs.forEach(input => {
          input.disabled = false;
        });
        verifyBtn.disabled = false;
        verifyBtn.classList.remove('opacity-50', 'cursor-not-allowed');
      }
    }, 1000);

    window.otpTimerInterval = interval;
  }

  // Start countdown when page loads
  countDown();

  // Handle resend button click
  resendBtn.addEventListener('click', function(e) {
    e.preventDefault();
    
    if (window.otpTimerInterval) {
      clearInterval(window.otpTimerInterval);
    }

    // Reset UI elements
    otpInputs.forEach(input => {
      input.value = '';
      input.disabled = false;
    });
    hiddenOtpInput.value = '';
    verifyBtn.disabled = false;
    verifyBtn.classList.remove('opacity-50', 'cursor-not-allowed');
    resendBtn.classList.add('hidden');

    window.location.href = '/forgotpassword-resendotp';
  });

  // Form submission validation
  document.getElementById('otpForm').addEventListener('submit', function(e) {
    const now = Date.now();
    const remain = duration - (now - otpTime);
    
    if (remain <= 0) {
      e.preventDefault();
      Swal.fire({
        title: 'Error',
        text: 'OTP has expired. Please request a new one.',
        icon: 'error'
      });
    }
  });
</script>

<style>
  .cursor-not-allowed {
    cursor: not-allowed;
  }
  
  .opacity-50 {
    opacity: 0.5;
  }
</style>
